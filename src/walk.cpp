// Generated by dust (version 0.5.3) - do not edit
#include <iostream>
#include <dust/dust.hpp>
#include <dust/interface.hpp>

class walk {
public:
  typedef double real_t;
  struct init_t {
    real_t sd;
  };
  walk(const init_t& data) : data_(data) {
  }
  size_t size() const {
    return 1;
  }
  std::vector<real_t> initial(size_t step) {
    std::vector<real_t> ret = {0};
    return ret;
  }
  void update(size_t step, const real_t * state,
              dust::rng_state_t<real_t>& rng_state,
              real_t * state_next) {
    real_t mean = state[0];
    state_next[0] = dust::distr::rnorm(rng_state, mean, data_.sd);
  }

private:
  init_t data_;
};

#include <cpp11/list.hpp>
template <>
walk::init_t dust_data<walk>(cpp11::list data) {
  walk::real_t sd = cpp11::as_cpp<walk::real_t>(data["sd"]);
  return walk::init_t{sd};
}

[[cpp11::register]]
SEXP dust_walk_alloc(cpp11::list r_data, size_t step, size_t n_particles,
                size_t n_threads, cpp11::sexp r_seed) {
  return dust_alloc<walk>(r_data, step, n_particles, n_threads, r_seed);
}

[[cpp11::register]]
SEXP dust_walk_run(SEXP ptr, size_t step_end) {
  return dust_run<walk>(ptr, step_end);
}

[[cpp11::register]]
SEXP dust_walk_set_index(SEXP ptr, cpp11::sexp r_index) {
  dust_set_index<walk>(ptr, r_index);
  return R_NilValue;
}

[[cpp11::register]]
SEXP dust_walk_set_state(SEXP ptr, SEXP r_state, SEXP r_step) {
  dust_set_state<walk>(ptr, r_state, r_step);
  return R_NilValue;
}

[[cpp11::register]]
SEXP dust_walk_reset(SEXP ptr, cpp11::list r_data, size_t step) {
  return dust_reset<walk>(ptr, r_data, step);
}

[[cpp11::register]]
SEXP dust_walk_state(SEXP ptr, SEXP r_index) {
  return dust_state<walk>(ptr, r_index);
}

[[cpp11::register]]
size_t dust_walk_step(SEXP ptr) {
  return dust_step<walk>(ptr);
}

[[cpp11::register]]
void dust_walk_reorder(SEXP ptr, cpp11::sexp r_index) {
  return dust_reorder<walk>(ptr, r_index);
}

[[cpp11::register]]
SEXP dust_walk_set_data(SEXP ptr, cpp11::list r_data) {
  return dust_set_data<walk>(ptr, r_data);
}

[[cpp11::register]]
SEXP dust_walk_rng_state(SEXP ptr, bool first_only) {
  return dust_rng_state<walk>(ptr, first_only);
}

[[cpp11::register]]
SEXP dust_walk_set_rng_state(SEXP ptr, cpp11::raws rng_state) {
  dust_set_rng_state<walk>(ptr, rng_state);
  return R_NilValue;
}

[[cpp11::register]]
SEXP dust_walk_simulate(cpp11::sexp r_steps,
                            cpp11::list r_data,
                            cpp11::doubles_matrix r_state,
                            cpp11::sexp r_index,
                            const size_t n_threads,
                            cpp11::sexp r_seed) {
  return dust_simulate<walk>(r_steps, r_data, r_state, r_index,
                                 n_threads, r_seed);
}

[[cpp11::register]]
bool dust_walk_has_openmp() {
#ifdef _OPENMP
  return true;
#else
  return false;
#endif
}
