// Generated by cpp11: do not edit by hand
// clang-format off


#include "cpp11/declarations.hpp"

// densities.cpp
SEXP dust_dbinom(cpp11::integers x, cpp11::integers size, cpp11::doubles prob, bool log);
extern "C" SEXP _dust_dust_dbinom(SEXP x, SEXP size, SEXP prob, SEXP log) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_dbinom(cpp11::as_cpp<cpp11::decay_t<cpp11::integers>>(x), cpp11::as_cpp<cpp11::decay_t<cpp11::integers>>(size), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(prob), cpp11::as_cpp<cpp11::decay_t<bool>>(log)));
  END_CPP11
}
// densities.cpp
SEXP dust_dnorm(cpp11::doubles x, cpp11::doubles mu, cpp11::doubles sd, bool log);
extern "C" SEXP _dust_dust_dnorm(SEXP x, SEXP mu, SEXP sd, SEXP log) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_dnorm(cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(x), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(mu), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(sd), cpp11::as_cpp<cpp11::decay_t<bool>>(log)));
  END_CPP11
}
// densities.cpp
SEXP dust_dnbinom(cpp11::integers x, cpp11::doubles size, cpp11::doubles mu, bool log);
extern "C" SEXP _dust_dust_dnbinom(SEXP x, SEXP size, SEXP mu, SEXP log) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_dnbinom(cpp11::as_cpp<cpp11::decay_t<cpp11::integers>>(x), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(size), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(mu), cpp11::as_cpp<cpp11::decay_t<bool>>(log)));
  END_CPP11
}
// densities.cpp
SEXP dust_dbetabinom(cpp11::integers x, cpp11::integers size, cpp11::doubles prob, cpp11::doubles rho, bool log);
extern "C" SEXP _dust_dust_dbetabinom(SEXP x, SEXP size, SEXP prob, SEXP rho, SEXP log) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_dbetabinom(cpp11::as_cpp<cpp11::decay_t<cpp11::integers>>(x), cpp11::as_cpp<cpp11::decay_t<cpp11::integers>>(size), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(prob), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(rho), cpp11::as_cpp<cpp11::decay_t<bool>>(log)));
  END_CPP11
}
// densities.cpp
SEXP dust_dpois(cpp11::integers x, cpp11::doubles lambda, bool log);
extern "C" SEXP _dust_dust_dpois(SEXP x, SEXP lambda, SEXP log) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_dpois(cpp11::as_cpp<cpp11::decay_t<cpp11::integers>>(x), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(lambda), cpp11::as_cpp<cpp11::decay_t<bool>>(log)));
  END_CPP11
}
// dust_rng.cpp
SEXP dust_rng_alloc(cpp11::sexp r_seed, int n_generators, bool is_float);
extern "C" SEXP _dust_dust_rng_alloc(SEXP r_seed, SEXP n_generators, SEXP is_float) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_rng_alloc(cpp11::as_cpp<cpp11::decay_t<cpp11::sexp>>(r_seed), cpp11::as_cpp<cpp11::decay_t<int>>(n_generators), cpp11::as_cpp<cpp11::decay_t<bool>>(is_float)));
  END_CPP11
}
// dust_rng.cpp
void dust_rng_jump(SEXP ptr, bool is_float);
extern "C" SEXP _dust_dust_rng_jump(SEXP ptr, SEXP is_float) {
  BEGIN_CPP11
    dust_rng_jump(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<bool>>(is_float));
    return R_NilValue;
  END_CPP11
}
// dust_rng.cpp
void dust_rng_long_jump(SEXP ptr, bool is_float);
extern "C" SEXP _dust_dust_rng_long_jump(SEXP ptr, SEXP is_float) {
  BEGIN_CPP11
    dust_rng_long_jump(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<bool>>(is_float));
    return R_NilValue;
  END_CPP11
}
// dust_rng.cpp
cpp11::writable::doubles dust_rng_unif_rand(SEXP ptr, int n, bool is_float);
extern "C" SEXP _dust_dust_rng_unif_rand(SEXP ptr, SEXP n, SEXP is_float) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_rng_unif_rand(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<int>>(n), cpp11::as_cpp<cpp11::decay_t<bool>>(is_float)));
  END_CPP11
}
// dust_rng.cpp
cpp11::writable::doubles dust_rng_norm_rand(SEXP ptr, int n, bool is_float);
extern "C" SEXP _dust_dust_rng_norm_rand(SEXP ptr, SEXP n, SEXP is_float) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_rng_norm_rand(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<int>>(n), cpp11::as_cpp<cpp11::decay_t<bool>>(is_float)));
  END_CPP11
}
// dust_rng.cpp
cpp11::writable::doubles dust_rng_runif(SEXP ptr, int n, cpp11::doubles r_min, cpp11::doubles r_max, bool is_float);
extern "C" SEXP _dust_dust_rng_runif(SEXP ptr, SEXP n, SEXP r_min, SEXP r_max, SEXP is_float) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_rng_runif(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<int>>(n), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(r_min), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(r_max), cpp11::as_cpp<cpp11::decay_t<bool>>(is_float)));
  END_CPP11
}
// dust_rng.cpp
cpp11::writable::doubles dust_rng_rexp(SEXP ptr, int n, cpp11::doubles r_rate, bool is_float);
extern "C" SEXP _dust_dust_rng_rexp(SEXP ptr, SEXP n, SEXP r_rate, SEXP is_float) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_rng_rexp(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<int>>(n), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(r_rate), cpp11::as_cpp<cpp11::decay_t<bool>>(is_float)));
  END_CPP11
}
// dust_rng.cpp
cpp11::writable::doubles dust_rng_rnorm(SEXP ptr, int n, cpp11::doubles r_mean, cpp11::doubles r_sd, bool is_float);
extern "C" SEXP _dust_dust_rng_rnorm(SEXP ptr, SEXP n, SEXP r_mean, SEXP r_sd, SEXP is_float) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_rng_rnorm(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<int>>(n), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(r_mean), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(r_sd), cpp11::as_cpp<cpp11::decay_t<bool>>(is_float)));
  END_CPP11
}
// dust_rng.cpp
cpp11::writable::integers dust_rng_rbinom(SEXP ptr, int n, cpp11::sexp r_size, cpp11::doubles r_prob, bool is_float);
extern "C" SEXP _dust_dust_rng_rbinom(SEXP ptr, SEXP n, SEXP r_size, SEXP r_prob, SEXP is_float) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_rng_rbinom(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<int>>(n), cpp11::as_cpp<cpp11::decay_t<cpp11::sexp>>(r_size), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(r_prob), cpp11::as_cpp<cpp11::decay_t<bool>>(is_float)));
  END_CPP11
}
// dust_rng.cpp
cpp11::writable::integers dust_rng_rpois(SEXP ptr, int n, cpp11::doubles r_lambda, bool is_float);
extern "C" SEXP _dust_dust_rng_rpois(SEXP ptr, SEXP n, SEXP r_lambda, SEXP is_float) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_rng_rpois(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<int>>(n), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(r_lambda), cpp11::as_cpp<cpp11::decay_t<bool>>(is_float)));
  END_CPP11
}
// dust_rng.cpp
cpp11::writable::raws dust_rng_state(SEXP ptr, bool is_float);
extern "C" SEXP _dust_dust_rng_state(SEXP ptr, SEXP is_float) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_rng_state(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<bool>>(is_float)));
  END_CPP11
}
// openmp.cpp
cpp11::writable::list cpp_openmp_info();
extern "C" SEXP _dust_cpp_openmp_info() {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_openmp_info());
  END_CPP11
}
// tools.cpp
cpp11::list cpp_scale_log_weights(std::vector<double> w);
extern "C" SEXP _dust_cpp_scale_log_weights(SEXP w) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_scale_log_weights(cpp11::as_cpp<cpp11::decay_t<std::vector<double>>>(w)));
  END_CPP11
}

extern "C" {
/* .Call calls */
extern SEXP _dust_cpp_openmp_info();
extern SEXP _dust_cpp_scale_log_weights(SEXP);
extern SEXP _dust_dust_dbetabinom(SEXP, SEXP, SEXP, SEXP, SEXP);
extern SEXP _dust_dust_dbinom(SEXP, SEXP, SEXP, SEXP);
extern SEXP _dust_dust_dnbinom(SEXP, SEXP, SEXP, SEXP);
extern SEXP _dust_dust_dnorm(SEXP, SEXP, SEXP, SEXP);
extern SEXP _dust_dust_dpois(SEXP, SEXP, SEXP);
extern SEXP _dust_dust_rng_alloc(SEXP, SEXP, SEXP);
extern SEXP _dust_dust_rng_jump(SEXP, SEXP);
extern SEXP _dust_dust_rng_long_jump(SEXP, SEXP);
extern SEXP _dust_dust_rng_norm_rand(SEXP, SEXP, SEXP);
extern SEXP _dust_dust_rng_rbinom(SEXP, SEXP, SEXP, SEXP, SEXP);
extern SEXP _dust_dust_rng_rexp(SEXP, SEXP, SEXP, SEXP);
extern SEXP _dust_dust_rng_rnorm(SEXP, SEXP, SEXP, SEXP, SEXP);
extern SEXP _dust_dust_rng_rpois(SEXP, SEXP, SEXP, SEXP);
extern SEXP _dust_dust_rng_runif(SEXP, SEXP, SEXP, SEXP, SEXP);
extern SEXP _dust_dust_rng_state(SEXP, SEXP);
extern SEXP _dust_dust_rng_unif_rand(SEXP, SEXP, SEXP);

static const R_CallMethodDef CallEntries[] = {
    {"_dust_cpp_openmp_info",       (DL_FUNC) &_dust_cpp_openmp_info,       0},
    {"_dust_cpp_scale_log_weights", (DL_FUNC) &_dust_cpp_scale_log_weights, 1},
    {"_dust_dust_dbetabinom",       (DL_FUNC) &_dust_dust_dbetabinom,       5},
    {"_dust_dust_dbinom",           (DL_FUNC) &_dust_dust_dbinom,           4},
    {"_dust_dust_dnbinom",          (DL_FUNC) &_dust_dust_dnbinom,          4},
    {"_dust_dust_dnorm",            (DL_FUNC) &_dust_dust_dnorm,            4},
    {"_dust_dust_dpois",            (DL_FUNC) &_dust_dust_dpois,            3},
    {"_dust_dust_rng_alloc",        (DL_FUNC) &_dust_dust_rng_alloc,        3},
    {"_dust_dust_rng_jump",         (DL_FUNC) &_dust_dust_rng_jump,         2},
    {"_dust_dust_rng_long_jump",    (DL_FUNC) &_dust_dust_rng_long_jump,    2},
    {"_dust_dust_rng_norm_rand",    (DL_FUNC) &_dust_dust_rng_norm_rand,    3},
    {"_dust_dust_rng_rbinom",       (DL_FUNC) &_dust_dust_rng_rbinom,       5},
    {"_dust_dust_rng_rexp",         (DL_FUNC) &_dust_dust_rng_rexp,         4},
    {"_dust_dust_rng_rnorm",        (DL_FUNC) &_dust_dust_rng_rnorm,        5},
    {"_dust_dust_rng_rpois",        (DL_FUNC) &_dust_dust_rng_rpois,        4},
    {"_dust_dust_rng_runif",        (DL_FUNC) &_dust_dust_rng_runif,        5},
    {"_dust_dust_rng_state",        (DL_FUNC) &_dust_dust_rng_state,        2},
    {"_dust_dust_rng_unif_rand",    (DL_FUNC) &_dust_dust_rng_unif_rand,    3},
    {NULL, NULL, 0}
};
}

extern "C" void R_init_dust(DllInfo* dll){
  R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
  R_useDynamicSymbols(dll, FALSE);
  R_forceSymbols(dll, TRUE);
}
