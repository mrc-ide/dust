// Generated by cpp11: do not edit by hand
// clang-format off


#include "cpp11/declarations.hpp"
#include <R_ext/Visibility.h>

// densities.cpp
SEXP density_binomial(cpp11::integers x, cpp11::integers size, cpp11::doubles prob, bool log);
extern "C" SEXP _dust_density_binomial(SEXP x, SEXP size, SEXP prob, SEXP log) {
  BEGIN_CPP11
    return cpp11::as_sexp(density_binomial(cpp11::as_cpp<cpp11::decay_t<cpp11::integers>>(x), cpp11::as_cpp<cpp11::decay_t<cpp11::integers>>(size), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(prob), cpp11::as_cpp<cpp11::decay_t<bool>>(log)));
  END_CPP11
}
// densities.cpp
SEXP density_normal(cpp11::doubles x, cpp11::doubles mu, cpp11::doubles sd, bool log);
extern "C" SEXP _dust_density_normal(SEXP x, SEXP mu, SEXP sd, SEXP log) {
  BEGIN_CPP11
    return cpp11::as_sexp(density_normal(cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(x), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(mu), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(sd), cpp11::as_cpp<cpp11::decay_t<bool>>(log)));
  END_CPP11
}
// densities.cpp
SEXP density_negative_binomial_mu(cpp11::integers x, cpp11::doubles size, cpp11::doubles mu, bool log, bool is_float);
extern "C" SEXP _dust_density_negative_binomial_mu(SEXP x, SEXP size, SEXP mu, SEXP log, SEXP is_float) {
  BEGIN_CPP11
    return cpp11::as_sexp(density_negative_binomial_mu(cpp11::as_cpp<cpp11::decay_t<cpp11::integers>>(x), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(size), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(mu), cpp11::as_cpp<cpp11::decay_t<bool>>(log), cpp11::as_cpp<cpp11::decay_t<bool>>(is_float)));
  END_CPP11
}
// densities.cpp
SEXP density_negative_binomial_prob(cpp11::integers x, cpp11::doubles size, cpp11::doubles prob, bool log);
extern "C" SEXP _dust_density_negative_binomial_prob(SEXP x, SEXP size, SEXP prob, SEXP log) {
  BEGIN_CPP11
    return cpp11::as_sexp(density_negative_binomial_prob(cpp11::as_cpp<cpp11::decay_t<cpp11::integers>>(x), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(size), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(prob), cpp11::as_cpp<cpp11::decay_t<bool>>(log)));
  END_CPP11
}
// densities.cpp
SEXP density_beta_binomial(cpp11::integers x, cpp11::integers size, cpp11::doubles prob, cpp11::doubles rho, bool log);
extern "C" SEXP _dust_density_beta_binomial(SEXP x, SEXP size, SEXP prob, SEXP rho, SEXP log) {
  BEGIN_CPP11
    return cpp11::as_sexp(density_beta_binomial(cpp11::as_cpp<cpp11::decay_t<cpp11::integers>>(x), cpp11::as_cpp<cpp11::decay_t<cpp11::integers>>(size), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(prob), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(rho), cpp11::as_cpp<cpp11::decay_t<bool>>(log)));
  END_CPP11
}
// densities.cpp
SEXP density_poisson(cpp11::integers x, cpp11::doubles lambda, bool log);
extern "C" SEXP _dust_density_poisson(SEXP x, SEXP lambda, SEXP log) {
  BEGIN_CPP11
    return cpp11::as_sexp(density_poisson(cpp11::as_cpp<cpp11::decay_t<cpp11::integers>>(x), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(lambda), cpp11::as_cpp<cpp11::decay_t<bool>>(log)));
  END_CPP11
}
// dust_rng_pointer.cpp
cpp11::sexp dust_rng_pointer_init(int n_streams, cpp11::sexp seed, int long_jump, std::string algorithm);
extern "C" SEXP _dust_dust_rng_pointer_init(SEXP n_streams, SEXP seed, SEXP long_jump, SEXP algorithm) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_rng_pointer_init(cpp11::as_cpp<cpp11::decay_t<int>>(n_streams), cpp11::as_cpp<cpp11::decay_t<cpp11::sexp>>(seed), cpp11::as_cpp<cpp11::decay_t<int>>(long_jump), cpp11::as_cpp<cpp11::decay_t<std::string>>(algorithm)));
  END_CPP11
}
// dust_rng_pointer.cpp
void dust_rng_pointer_sync(cpp11::environment obj, std::string algorithm);
extern "C" SEXP _dust_dust_rng_pointer_sync(SEXP obj, SEXP algorithm) {
  BEGIN_CPP11
    dust_rng_pointer_sync(cpp11::as_cpp<cpp11::decay_t<cpp11::environment>>(obj), cpp11::as_cpp<cpp11::decay_t<std::string>>(algorithm));
    return R_NilValue;
  END_CPP11
}
// dust_rng_pointer.cpp
double test_rng_pointer_get(cpp11::environment obj, int n_streams);
extern "C" SEXP _dust_test_rng_pointer_get(SEXP obj, SEXP n_streams) {
  BEGIN_CPP11
    return cpp11::as_sexp(test_rng_pointer_get(cpp11::as_cpp<cpp11::decay_t<cpp11::environment>>(obj), cpp11::as_cpp<cpp11::decay_t<int>>(n_streams)));
  END_CPP11
}
// dust_rng.cpp
SEXP dust_rng_alloc(cpp11::sexp r_seed, int n_streams, bool deterministic, bool is_float);
extern "C" SEXP _dust_dust_rng_alloc(SEXP r_seed, SEXP n_streams, SEXP deterministic, SEXP is_float) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_rng_alloc(cpp11::as_cpp<cpp11::decay_t<cpp11::sexp>>(r_seed), cpp11::as_cpp<cpp11::decay_t<int>>(n_streams), cpp11::as_cpp<cpp11::decay_t<bool>>(deterministic), cpp11::as_cpp<cpp11::decay_t<bool>>(is_float)));
  END_CPP11
}
// dust_rng.cpp
void dust_rng_jump(SEXP ptr, bool is_float);
extern "C" SEXP _dust_dust_rng_jump(SEXP ptr, SEXP is_float) {
  BEGIN_CPP11
    dust_rng_jump(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<bool>>(is_float));
    return R_NilValue;
  END_CPP11
}
// dust_rng.cpp
void dust_rng_long_jump(SEXP ptr, bool is_float);
extern "C" SEXP _dust_dust_rng_long_jump(SEXP ptr, SEXP is_float) {
  BEGIN_CPP11
    dust_rng_long_jump(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<bool>>(is_float));
    return R_NilValue;
  END_CPP11
}
// dust_rng.cpp
cpp11::sexp dust_rng_random_real(SEXP ptr, int n, int n_threads, bool is_float);
extern "C" SEXP _dust_dust_rng_random_real(SEXP ptr, SEXP n, SEXP n_threads, SEXP is_float) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_rng_random_real(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<int>>(n), cpp11::as_cpp<cpp11::decay_t<int>>(n_threads), cpp11::as_cpp<cpp11::decay_t<bool>>(is_float)));
  END_CPP11
}
// dust_rng.cpp
cpp11::sexp dust_rng_random_normal(SEXP ptr, int n, int n_threads, std::string algorithm, bool is_float);
extern "C" SEXP _dust_dust_rng_random_normal(SEXP ptr, SEXP n, SEXP n_threads, SEXP algorithm, SEXP is_float) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_rng_random_normal(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<int>>(n), cpp11::as_cpp<cpp11::decay_t<int>>(n_threads), cpp11::as_cpp<cpp11::decay_t<std::string>>(algorithm), cpp11::as_cpp<cpp11::decay_t<bool>>(is_float)));
  END_CPP11
}
// dust_rng.cpp
cpp11::sexp dust_rng_uniform(SEXP ptr, int n, cpp11::doubles r_min, cpp11::doubles r_max, int n_threads, bool is_float);
extern "C" SEXP _dust_dust_rng_uniform(SEXP ptr, SEXP n, SEXP r_min, SEXP r_max, SEXP n_threads, SEXP is_float) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_rng_uniform(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<int>>(n), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(r_min), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(r_max), cpp11::as_cpp<cpp11::decay_t<int>>(n_threads), cpp11::as_cpp<cpp11::decay_t<bool>>(is_float)));
  END_CPP11
}
// dust_rng.cpp
cpp11::sexp dust_rng_exponential(SEXP ptr, int n, cpp11::doubles r_rate, int n_threads, bool is_float);
extern "C" SEXP _dust_dust_rng_exponential(SEXP ptr, SEXP n, SEXP r_rate, SEXP n_threads, SEXP is_float) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_rng_exponential(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<int>>(n), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(r_rate), cpp11::as_cpp<cpp11::decay_t<int>>(n_threads), cpp11::as_cpp<cpp11::decay_t<bool>>(is_float)));
  END_CPP11
}
// dust_rng.cpp
cpp11::sexp dust_rng_normal(SEXP ptr, int n, cpp11::doubles r_mean, cpp11::doubles r_sd, int n_threads, std::string algorithm, bool is_float);
extern "C" SEXP _dust_dust_rng_normal(SEXP ptr, SEXP n, SEXP r_mean, SEXP r_sd, SEXP n_threads, SEXP algorithm, SEXP is_float) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_rng_normal(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<int>>(n), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(r_mean), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(r_sd), cpp11::as_cpp<cpp11::decay_t<int>>(n_threads), cpp11::as_cpp<cpp11::decay_t<std::string>>(algorithm), cpp11::as_cpp<cpp11::decay_t<bool>>(is_float)));
  END_CPP11
}
// dust_rng.cpp
cpp11::sexp dust_rng_binomial(SEXP ptr, int n, cpp11::doubles r_size, cpp11::doubles r_prob, int n_threads, bool is_float);
extern "C" SEXP _dust_dust_rng_binomial(SEXP ptr, SEXP n, SEXP r_size, SEXP r_prob, SEXP n_threads, SEXP is_float) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_rng_binomial(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<int>>(n), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(r_size), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(r_prob), cpp11::as_cpp<cpp11::decay_t<int>>(n_threads), cpp11::as_cpp<cpp11::decay_t<bool>>(is_float)));
  END_CPP11
}
// dust_rng.cpp
cpp11::sexp dust_rng_poisson(SEXP ptr, int n, cpp11::doubles r_lambda, int n_threads, bool is_float);
extern "C" SEXP _dust_dust_rng_poisson(SEXP ptr, SEXP n, SEXP r_lambda, SEXP n_threads, SEXP is_float) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_rng_poisson(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<int>>(n), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(r_lambda), cpp11::as_cpp<cpp11::decay_t<int>>(n_threads), cpp11::as_cpp<cpp11::decay_t<bool>>(is_float)));
  END_CPP11
}
// dust_rng.cpp
cpp11::sexp dust_rng_multinomial(SEXP ptr, int n, cpp11::doubles r_size, cpp11::doubles r_prob, int n_threads, bool is_float);
extern "C" SEXP _dust_dust_rng_multinomial(SEXP ptr, SEXP n, SEXP r_size, SEXP r_prob, SEXP n_threads, SEXP is_float) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_rng_multinomial(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<int>>(n), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(r_size), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(r_prob), cpp11::as_cpp<cpp11::decay_t<int>>(n_threads), cpp11::as_cpp<cpp11::decay_t<bool>>(is_float)));
  END_CPP11
}
// dust_rng.cpp
cpp11::sexp dust_rng_state(SEXP ptr, bool is_float);
extern "C" SEXP _dust_dust_rng_state(SEXP ptr, SEXP is_float) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_rng_state(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<bool>>(is_float)));
  END_CPP11
}
// openmp.cpp
cpp11::writable::list cpp_openmp_info();
extern "C" SEXP _dust_cpp_openmp_info() {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_openmp_info());
  END_CPP11
}
// sir.cpp
cpp11::sexp dust_sir_capabilities();
extern "C" SEXP _dust_dust_sir_capabilities() {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_sir_capabilities());
  END_CPP11
}
// sir.cpp
cpp11::sexp dust_sir_gpu_info();
extern "C" SEXP _dust_dust_sir_gpu_info() {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_sir_gpu_info());
  END_CPP11
}
// sir.cpp
SEXP dust_cpu_sir_alloc(cpp11::list r_pars, bool pars_multi, size_t step, cpp11::sexp r_n_particles, size_t n_threads, cpp11::sexp r_seed, bool deterministic, cpp11::sexp gpu_config);
extern "C" SEXP _dust_dust_cpu_sir_alloc(SEXP r_pars, SEXP pars_multi, SEXP step, SEXP r_n_particles, SEXP n_threads, SEXP r_seed, SEXP deterministic, SEXP gpu_config) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_cpu_sir_alloc(cpp11::as_cpp<cpp11::decay_t<cpp11::list>>(r_pars), cpp11::as_cpp<cpp11::decay_t<bool>>(pars_multi), cpp11::as_cpp<cpp11::decay_t<size_t>>(step), cpp11::as_cpp<cpp11::decay_t<cpp11::sexp>>(r_n_particles), cpp11::as_cpp<cpp11::decay_t<size_t>>(n_threads), cpp11::as_cpp<cpp11::decay_t<cpp11::sexp>>(r_seed), cpp11::as_cpp<cpp11::decay_t<bool>>(deterministic), cpp11::as_cpp<cpp11::decay_t<cpp11::sexp>>(gpu_config)));
  END_CPP11
}
// sir.cpp
SEXP dust_cpu_sir_run(SEXP ptr, size_t step_end);
extern "C" SEXP _dust_dust_cpu_sir_run(SEXP ptr, SEXP step_end) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_cpu_sir_run(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<size_t>>(step_end)));
  END_CPP11
}
// sir.cpp
SEXP dust_cpu_sir_simulate(SEXP ptr, cpp11::sexp step_end);
extern "C" SEXP _dust_dust_cpu_sir_simulate(SEXP ptr, SEXP step_end) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_cpu_sir_simulate(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<cpp11::sexp>>(step_end)));
  END_CPP11
}
// sir.cpp
SEXP dust_cpu_sir_set_index(SEXP ptr, cpp11::sexp r_index);
extern "C" SEXP _dust_dust_cpu_sir_set_index(SEXP ptr, SEXP r_index) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_cpu_sir_set_index(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<cpp11::sexp>>(r_index)));
  END_CPP11
}
// sir.cpp
SEXP dust_cpu_sir_update_state(SEXP ptr, SEXP r_pars, SEXP r_state, SEXP r_step, SEXP r_set_initial_state);
extern "C" SEXP _dust_dust_cpu_sir_update_state(SEXP ptr, SEXP r_pars, SEXP r_state, SEXP r_step, SEXP r_set_initial_state) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_cpu_sir_update_state(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<SEXP>>(r_pars), cpp11::as_cpp<cpp11::decay_t<SEXP>>(r_state), cpp11::as_cpp<cpp11::decay_t<SEXP>>(r_step), cpp11::as_cpp<cpp11::decay_t<SEXP>>(r_set_initial_state)));
  END_CPP11
}
// sir.cpp
SEXP dust_cpu_sir_state(SEXP ptr, SEXP r_index);
extern "C" SEXP _dust_dust_cpu_sir_state(SEXP ptr, SEXP r_index) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_cpu_sir_state(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<SEXP>>(r_index)));
  END_CPP11
}
// sir.cpp
size_t dust_cpu_sir_step(SEXP ptr);
extern "C" SEXP _dust_dust_cpu_sir_step(SEXP ptr) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_cpu_sir_step(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr)));
  END_CPP11
}
// sir.cpp
void dust_cpu_sir_reorder(SEXP ptr, cpp11::sexp r_index);
extern "C" SEXP _dust_dust_cpu_sir_reorder(SEXP ptr, SEXP r_index) {
  BEGIN_CPP11
    dust_cpu_sir_reorder(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<cpp11::sexp>>(r_index));
    return R_NilValue;
  END_CPP11
}
// sir.cpp
SEXP dust_cpu_sir_resample(SEXP ptr, cpp11::doubles r_weights);
extern "C" SEXP _dust_dust_cpu_sir_resample(SEXP ptr, SEXP r_weights) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_cpu_sir_resample(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(r_weights)));
  END_CPP11
}
// sir.cpp
SEXP dust_cpu_sir_rng_state(SEXP ptr, bool first_only, bool last_only);
extern "C" SEXP _dust_dust_cpu_sir_rng_state(SEXP ptr, SEXP first_only, SEXP last_only) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_cpu_sir_rng_state(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<bool>>(first_only), cpp11::as_cpp<cpp11::decay_t<bool>>(last_only)));
  END_CPP11
}
// sir.cpp
SEXP dust_cpu_sir_set_rng_state(SEXP ptr, cpp11::raws rng_state);
extern "C" SEXP _dust_dust_cpu_sir_set_rng_state(SEXP ptr, SEXP rng_state) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_cpu_sir_set_rng_state(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<cpp11::raws>>(rng_state)));
  END_CPP11
}
// sir.cpp
SEXP dust_cpu_sir_set_data(SEXP ptr, cpp11::list data);
extern "C" SEXP _dust_dust_cpu_sir_set_data(SEXP ptr, SEXP data) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_cpu_sir_set_data(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<cpp11::list>>(data)));
  END_CPP11
}
// sir.cpp
SEXP dust_cpu_sir_compare_data(SEXP ptr);
extern "C" SEXP _dust_dust_cpu_sir_compare_data(SEXP ptr) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_cpu_sir_compare_data(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr)));
  END_CPP11
}
// sir.cpp
SEXP dust_cpu_sir_filter(SEXP ptr, bool save_trajectories, cpp11::sexp step_snapshot);
extern "C" SEXP _dust_dust_cpu_sir_filter(SEXP ptr, SEXP save_trajectories, SEXP step_snapshot) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_cpu_sir_filter(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<bool>>(save_trajectories), cpp11::as_cpp<cpp11::decay_t<cpp11::sexp>>(step_snapshot)));
  END_CPP11
}
// sir.cpp
void dust_cpu_sir_set_n_threads(SEXP ptr, int n_threads);
extern "C" SEXP _dust_dust_cpu_sir_set_n_threads(SEXP ptr, SEXP n_threads) {
  BEGIN_CPP11
    dust_cpu_sir_set_n_threads(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<int>>(n_threads));
    return R_NilValue;
  END_CPP11
}
// sir.cpp
int dust_cpu_sir_n_state(SEXP ptr);
extern "C" SEXP _dust_dust_cpu_sir_n_state(SEXP ptr) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_cpu_sir_n_state(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr)));
  END_CPP11
}
// sirs.cpp
cpp11::sexp dust_sirs_capabilities();
extern "C" SEXP _dust_dust_sirs_capabilities() {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_sirs_capabilities());
  END_CPP11
}
// sirs.cpp
cpp11::sexp dust_sirs_gpu_info();
extern "C" SEXP _dust_dust_sirs_gpu_info() {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_sirs_gpu_info());
  END_CPP11
}
// sirs.cpp
SEXP dust_cpu_sirs_alloc(cpp11::list r_pars, bool pars_multi, size_t step, cpp11::sexp r_n_particles, size_t n_threads, cpp11::sexp r_seed, bool deterministic, cpp11::sexp gpu_config);
extern "C" SEXP _dust_dust_cpu_sirs_alloc(SEXP r_pars, SEXP pars_multi, SEXP step, SEXP r_n_particles, SEXP n_threads, SEXP r_seed, SEXP deterministic, SEXP gpu_config) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_cpu_sirs_alloc(cpp11::as_cpp<cpp11::decay_t<cpp11::list>>(r_pars), cpp11::as_cpp<cpp11::decay_t<bool>>(pars_multi), cpp11::as_cpp<cpp11::decay_t<size_t>>(step), cpp11::as_cpp<cpp11::decay_t<cpp11::sexp>>(r_n_particles), cpp11::as_cpp<cpp11::decay_t<size_t>>(n_threads), cpp11::as_cpp<cpp11::decay_t<cpp11::sexp>>(r_seed), cpp11::as_cpp<cpp11::decay_t<bool>>(deterministic), cpp11::as_cpp<cpp11::decay_t<cpp11::sexp>>(gpu_config)));
  END_CPP11
}
// sirs.cpp
SEXP dust_cpu_sirs_run(SEXP ptr, size_t step_end);
extern "C" SEXP _dust_dust_cpu_sirs_run(SEXP ptr, SEXP step_end) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_cpu_sirs_run(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<size_t>>(step_end)));
  END_CPP11
}
// sirs.cpp
SEXP dust_cpu_sirs_simulate(SEXP ptr, cpp11::sexp step_end);
extern "C" SEXP _dust_dust_cpu_sirs_simulate(SEXP ptr, SEXP step_end) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_cpu_sirs_simulate(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<cpp11::sexp>>(step_end)));
  END_CPP11
}
// sirs.cpp
SEXP dust_cpu_sirs_set_index(SEXP ptr, cpp11::sexp r_index);
extern "C" SEXP _dust_dust_cpu_sirs_set_index(SEXP ptr, SEXP r_index) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_cpu_sirs_set_index(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<cpp11::sexp>>(r_index)));
  END_CPP11
}
// sirs.cpp
SEXP dust_cpu_sirs_update_state(SEXP ptr, SEXP r_pars, SEXP r_state, SEXP r_step, SEXP r_set_initial_state);
extern "C" SEXP _dust_dust_cpu_sirs_update_state(SEXP ptr, SEXP r_pars, SEXP r_state, SEXP r_step, SEXP r_set_initial_state) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_cpu_sirs_update_state(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<SEXP>>(r_pars), cpp11::as_cpp<cpp11::decay_t<SEXP>>(r_state), cpp11::as_cpp<cpp11::decay_t<SEXP>>(r_step), cpp11::as_cpp<cpp11::decay_t<SEXP>>(r_set_initial_state)));
  END_CPP11
}
// sirs.cpp
SEXP dust_cpu_sirs_state(SEXP ptr, SEXP r_index);
extern "C" SEXP _dust_dust_cpu_sirs_state(SEXP ptr, SEXP r_index) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_cpu_sirs_state(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<SEXP>>(r_index)));
  END_CPP11
}
// sirs.cpp
size_t dust_cpu_sirs_step(SEXP ptr);
extern "C" SEXP _dust_dust_cpu_sirs_step(SEXP ptr) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_cpu_sirs_step(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr)));
  END_CPP11
}
// sirs.cpp
void dust_cpu_sirs_reorder(SEXP ptr, cpp11::sexp r_index);
extern "C" SEXP _dust_dust_cpu_sirs_reorder(SEXP ptr, SEXP r_index) {
  BEGIN_CPP11
    dust_cpu_sirs_reorder(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<cpp11::sexp>>(r_index));
    return R_NilValue;
  END_CPP11
}
// sirs.cpp
SEXP dust_cpu_sirs_resample(SEXP ptr, cpp11::doubles r_weights);
extern "C" SEXP _dust_dust_cpu_sirs_resample(SEXP ptr, SEXP r_weights) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_cpu_sirs_resample(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(r_weights)));
  END_CPP11
}
// sirs.cpp
SEXP dust_cpu_sirs_rng_state(SEXP ptr, bool first_only, bool last_only);
extern "C" SEXP _dust_dust_cpu_sirs_rng_state(SEXP ptr, SEXP first_only, SEXP last_only) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_cpu_sirs_rng_state(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<bool>>(first_only), cpp11::as_cpp<cpp11::decay_t<bool>>(last_only)));
  END_CPP11
}
// sirs.cpp
SEXP dust_cpu_sirs_set_rng_state(SEXP ptr, cpp11::raws rng_state);
extern "C" SEXP _dust_dust_cpu_sirs_set_rng_state(SEXP ptr, SEXP rng_state) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_cpu_sirs_set_rng_state(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<cpp11::raws>>(rng_state)));
  END_CPP11
}
// sirs.cpp
SEXP dust_cpu_sirs_set_data(SEXP ptr, cpp11::list data);
extern "C" SEXP _dust_dust_cpu_sirs_set_data(SEXP ptr, SEXP data) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_cpu_sirs_set_data(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<cpp11::list>>(data)));
  END_CPP11
}
// sirs.cpp
SEXP dust_cpu_sirs_compare_data(SEXP ptr);
extern "C" SEXP _dust_dust_cpu_sirs_compare_data(SEXP ptr) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_cpu_sirs_compare_data(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr)));
  END_CPP11
}
// sirs.cpp
SEXP dust_cpu_sirs_filter(SEXP ptr, bool save_trajectories, cpp11::sexp step_snapshot);
extern "C" SEXP _dust_dust_cpu_sirs_filter(SEXP ptr, SEXP save_trajectories, SEXP step_snapshot) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_cpu_sirs_filter(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<bool>>(save_trajectories), cpp11::as_cpp<cpp11::decay_t<cpp11::sexp>>(step_snapshot)));
  END_CPP11
}
// sirs.cpp
void dust_cpu_sirs_set_n_threads(SEXP ptr, int n_threads);
extern "C" SEXP _dust_dust_cpu_sirs_set_n_threads(SEXP ptr, SEXP n_threads) {
  BEGIN_CPP11
    dust_cpu_sirs_set_n_threads(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<int>>(n_threads));
    return R_NilValue;
  END_CPP11
}
// sirs.cpp
int dust_cpu_sirs_n_state(SEXP ptr);
extern "C" SEXP _dust_dust_cpu_sirs_n_state(SEXP ptr) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_cpu_sirs_n_state(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr)));
  END_CPP11
}
// sirs.cpp
SEXP dust_gpu_sirs_alloc(cpp11::list r_pars, bool pars_multi, size_t step, cpp11::sexp r_n_particles, size_t n_threads, cpp11::sexp r_seed, bool deterministic, cpp11::sexp gpu_config);
extern "C" SEXP _dust_dust_gpu_sirs_alloc(SEXP r_pars, SEXP pars_multi, SEXP step, SEXP r_n_particles, SEXP n_threads, SEXP r_seed, SEXP deterministic, SEXP gpu_config) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_gpu_sirs_alloc(cpp11::as_cpp<cpp11::decay_t<cpp11::list>>(r_pars), cpp11::as_cpp<cpp11::decay_t<bool>>(pars_multi), cpp11::as_cpp<cpp11::decay_t<size_t>>(step), cpp11::as_cpp<cpp11::decay_t<cpp11::sexp>>(r_n_particles), cpp11::as_cpp<cpp11::decay_t<size_t>>(n_threads), cpp11::as_cpp<cpp11::decay_t<cpp11::sexp>>(r_seed), cpp11::as_cpp<cpp11::decay_t<bool>>(deterministic), cpp11::as_cpp<cpp11::decay_t<cpp11::sexp>>(gpu_config)));
  END_CPP11
}
// sirs.cpp
SEXP dust_gpu_sirs_run(SEXP ptr, size_t step_end);
extern "C" SEXP _dust_dust_gpu_sirs_run(SEXP ptr, SEXP step_end) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_gpu_sirs_run(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<size_t>>(step_end)));
  END_CPP11
}
// sirs.cpp
SEXP dust_gpu_sirs_simulate(SEXP ptr, cpp11::sexp step_end);
extern "C" SEXP _dust_dust_gpu_sirs_simulate(SEXP ptr, SEXP step_end) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_gpu_sirs_simulate(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<cpp11::sexp>>(step_end)));
  END_CPP11
}
// sirs.cpp
SEXP dust_gpu_sirs_set_index(SEXP ptr, cpp11::sexp r_index);
extern "C" SEXP _dust_dust_gpu_sirs_set_index(SEXP ptr, SEXP r_index) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_gpu_sirs_set_index(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<cpp11::sexp>>(r_index)));
  END_CPP11
}
// sirs.cpp
SEXP dust_gpu_sirs_update_state(SEXP ptr, SEXP r_pars, SEXP r_state, SEXP r_step, SEXP r_set_initial_state);
extern "C" SEXP _dust_dust_gpu_sirs_update_state(SEXP ptr, SEXP r_pars, SEXP r_state, SEXP r_step, SEXP r_set_initial_state) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_gpu_sirs_update_state(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<SEXP>>(r_pars), cpp11::as_cpp<cpp11::decay_t<SEXP>>(r_state), cpp11::as_cpp<cpp11::decay_t<SEXP>>(r_step), cpp11::as_cpp<cpp11::decay_t<SEXP>>(r_set_initial_state)));
  END_CPP11
}
// sirs.cpp
SEXP dust_gpu_sirs_state(SEXP ptr, SEXP r_index);
extern "C" SEXP _dust_dust_gpu_sirs_state(SEXP ptr, SEXP r_index) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_gpu_sirs_state(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<SEXP>>(r_index)));
  END_CPP11
}
// sirs.cpp
size_t dust_gpu_sirs_step(SEXP ptr);
extern "C" SEXP _dust_dust_gpu_sirs_step(SEXP ptr) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_gpu_sirs_step(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr)));
  END_CPP11
}
// sirs.cpp
void dust_gpu_sirs_reorder(SEXP ptr, cpp11::sexp r_index);
extern "C" SEXP _dust_dust_gpu_sirs_reorder(SEXP ptr, SEXP r_index) {
  BEGIN_CPP11
    dust_gpu_sirs_reorder(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<cpp11::sexp>>(r_index));
    return R_NilValue;
  END_CPP11
}
// sirs.cpp
SEXP dust_gpu_sirs_resample(SEXP ptr, cpp11::doubles r_weights);
extern "C" SEXP _dust_dust_gpu_sirs_resample(SEXP ptr, SEXP r_weights) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_gpu_sirs_resample(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(r_weights)));
  END_CPP11
}
// sirs.cpp
SEXP dust_gpu_sirs_rng_state(SEXP ptr, bool first_only, bool last_only);
extern "C" SEXP _dust_dust_gpu_sirs_rng_state(SEXP ptr, SEXP first_only, SEXP last_only) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_gpu_sirs_rng_state(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<bool>>(first_only), cpp11::as_cpp<cpp11::decay_t<bool>>(last_only)));
  END_CPP11
}
// sirs.cpp
SEXP dust_gpu_sirs_set_rng_state(SEXP ptr, cpp11::raws rng_state);
extern "C" SEXP _dust_dust_gpu_sirs_set_rng_state(SEXP ptr, SEXP rng_state) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_gpu_sirs_set_rng_state(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<cpp11::raws>>(rng_state)));
  END_CPP11
}
// sirs.cpp
SEXP dust_gpu_sirs_set_data(SEXP ptr, cpp11::list data);
extern "C" SEXP _dust_dust_gpu_sirs_set_data(SEXP ptr, SEXP data) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_gpu_sirs_set_data(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<cpp11::list>>(data)));
  END_CPP11
}
// sirs.cpp
SEXP dust_gpu_sirs_compare_data(SEXP ptr);
extern "C" SEXP _dust_dust_gpu_sirs_compare_data(SEXP ptr) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_gpu_sirs_compare_data(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr)));
  END_CPP11
}
// sirs.cpp
SEXP dust_gpu_sirs_filter(SEXP ptr, bool save_trajectories, cpp11::sexp step_snapshot);
extern "C" SEXP _dust_dust_gpu_sirs_filter(SEXP ptr, SEXP save_trajectories, SEXP step_snapshot) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_gpu_sirs_filter(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<bool>>(save_trajectories), cpp11::as_cpp<cpp11::decay_t<cpp11::sexp>>(step_snapshot)));
  END_CPP11
}
// sirs.cpp
void dust_gpu_sirs_set_n_threads(SEXP ptr, int n_threads);
extern "C" SEXP _dust_dust_gpu_sirs_set_n_threads(SEXP ptr, SEXP n_threads) {
  BEGIN_CPP11
    dust_gpu_sirs_set_n_threads(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<int>>(n_threads));
    return R_NilValue;
  END_CPP11
}
// sirs.cpp
int dust_gpu_sirs_n_state(SEXP ptr);
extern "C" SEXP _dust_dust_gpu_sirs_n_state(SEXP ptr) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_gpu_sirs_n_state(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr)));
  END_CPP11
}
// test_cuda_launch_control.cpp
SEXP test_cuda_pars(cpp11::sexp r_gpu_config, int n_particles, int n_particles_each, int n_state, int n_state_full, int n_shared_int, int n_shared_real, int data_size, int shared_size);
extern "C" SEXP _dust_test_cuda_pars(SEXP r_gpu_config, SEXP n_particles, SEXP n_particles_each, SEXP n_state, SEXP n_state_full, SEXP n_shared_int, SEXP n_shared_real, SEXP data_size, SEXP shared_size) {
  BEGIN_CPP11
    return cpp11::as_sexp(test_cuda_pars(cpp11::as_cpp<cpp11::decay_t<cpp11::sexp>>(r_gpu_config), cpp11::as_cpp<cpp11::decay_t<int>>(n_particles), cpp11::as_cpp<cpp11::decay_t<int>>(n_particles_each), cpp11::as_cpp<cpp11::decay_t<int>>(n_state), cpp11::as_cpp<cpp11::decay_t<int>>(n_state_full), cpp11::as_cpp<cpp11::decay_t<int>>(n_shared_int), cpp11::as_cpp<cpp11::decay_t<int>>(n_shared_real), cpp11::as_cpp<cpp11::decay_t<int>>(data_size), cpp11::as_cpp<cpp11::decay_t<int>>(shared_size)));
  END_CPP11
}
// test_rng.cpp
std::vector<std::string> test_xoshiro_run(cpp11::environment obj);
extern "C" SEXP _dust_test_xoshiro_run(SEXP obj) {
  BEGIN_CPP11
    return cpp11::as_sexp(test_xoshiro_run(cpp11::as_cpp<cpp11::decay_t<cpp11::environment>>(obj)));
  END_CPP11
}
// tools.cpp
cpp11::list cpp_scale_log_weights(std::vector<double> w);
extern "C" SEXP _dust_cpp_scale_log_weights(SEXP w) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_scale_log_weights(cpp11::as_cpp<cpp11::decay_t<std::vector<double>>>(w)));
  END_CPP11
}
// variable.cpp
cpp11::sexp dust_variable_capabilities();
extern "C" SEXP _dust_dust_variable_capabilities() {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_variable_capabilities());
  END_CPP11
}
// variable.cpp
cpp11::sexp dust_variable_gpu_info();
extern "C" SEXP _dust_dust_variable_gpu_info() {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_variable_gpu_info());
  END_CPP11
}
// variable.cpp
SEXP dust_cpu_variable_alloc(cpp11::list r_pars, bool pars_multi, size_t step, cpp11::sexp r_n_particles, size_t n_threads, cpp11::sexp r_seed, bool deterministic, cpp11::sexp gpu_config);
extern "C" SEXP _dust_dust_cpu_variable_alloc(SEXP r_pars, SEXP pars_multi, SEXP step, SEXP r_n_particles, SEXP n_threads, SEXP r_seed, SEXP deterministic, SEXP gpu_config) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_cpu_variable_alloc(cpp11::as_cpp<cpp11::decay_t<cpp11::list>>(r_pars), cpp11::as_cpp<cpp11::decay_t<bool>>(pars_multi), cpp11::as_cpp<cpp11::decay_t<size_t>>(step), cpp11::as_cpp<cpp11::decay_t<cpp11::sexp>>(r_n_particles), cpp11::as_cpp<cpp11::decay_t<size_t>>(n_threads), cpp11::as_cpp<cpp11::decay_t<cpp11::sexp>>(r_seed), cpp11::as_cpp<cpp11::decay_t<bool>>(deterministic), cpp11::as_cpp<cpp11::decay_t<cpp11::sexp>>(gpu_config)));
  END_CPP11
}
// variable.cpp
SEXP dust_cpu_variable_run(SEXP ptr, size_t step_end);
extern "C" SEXP _dust_dust_cpu_variable_run(SEXP ptr, SEXP step_end) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_cpu_variable_run(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<size_t>>(step_end)));
  END_CPP11
}
// variable.cpp
SEXP dust_cpu_variable_simulate(SEXP ptr, cpp11::sexp step_end);
extern "C" SEXP _dust_dust_cpu_variable_simulate(SEXP ptr, SEXP step_end) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_cpu_variable_simulate(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<cpp11::sexp>>(step_end)));
  END_CPP11
}
// variable.cpp
SEXP dust_cpu_variable_set_index(SEXP ptr, cpp11::sexp r_index);
extern "C" SEXP _dust_dust_cpu_variable_set_index(SEXP ptr, SEXP r_index) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_cpu_variable_set_index(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<cpp11::sexp>>(r_index)));
  END_CPP11
}
// variable.cpp
SEXP dust_cpu_variable_update_state(SEXP ptr, SEXP r_pars, SEXP r_state, SEXP r_step, SEXP r_set_initial_state);
extern "C" SEXP _dust_dust_cpu_variable_update_state(SEXP ptr, SEXP r_pars, SEXP r_state, SEXP r_step, SEXP r_set_initial_state) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_cpu_variable_update_state(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<SEXP>>(r_pars), cpp11::as_cpp<cpp11::decay_t<SEXP>>(r_state), cpp11::as_cpp<cpp11::decay_t<SEXP>>(r_step), cpp11::as_cpp<cpp11::decay_t<SEXP>>(r_set_initial_state)));
  END_CPP11
}
// variable.cpp
SEXP dust_cpu_variable_state(SEXP ptr, SEXP r_index);
extern "C" SEXP _dust_dust_cpu_variable_state(SEXP ptr, SEXP r_index) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_cpu_variable_state(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<SEXP>>(r_index)));
  END_CPP11
}
// variable.cpp
size_t dust_cpu_variable_step(SEXP ptr);
extern "C" SEXP _dust_dust_cpu_variable_step(SEXP ptr) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_cpu_variable_step(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr)));
  END_CPP11
}
// variable.cpp
void dust_cpu_variable_reorder(SEXP ptr, cpp11::sexp r_index);
extern "C" SEXP _dust_dust_cpu_variable_reorder(SEXP ptr, SEXP r_index) {
  BEGIN_CPP11
    dust_cpu_variable_reorder(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<cpp11::sexp>>(r_index));
    return R_NilValue;
  END_CPP11
}
// variable.cpp
SEXP dust_cpu_variable_resample(SEXP ptr, cpp11::doubles r_weights);
extern "C" SEXP _dust_dust_cpu_variable_resample(SEXP ptr, SEXP r_weights) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_cpu_variable_resample(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(r_weights)));
  END_CPP11
}
// variable.cpp
SEXP dust_cpu_variable_rng_state(SEXP ptr, bool first_only, bool last_only);
extern "C" SEXP _dust_dust_cpu_variable_rng_state(SEXP ptr, SEXP first_only, SEXP last_only) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_cpu_variable_rng_state(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<bool>>(first_only), cpp11::as_cpp<cpp11::decay_t<bool>>(last_only)));
  END_CPP11
}
// variable.cpp
SEXP dust_cpu_variable_set_rng_state(SEXP ptr, cpp11::raws rng_state);
extern "C" SEXP _dust_dust_cpu_variable_set_rng_state(SEXP ptr, SEXP rng_state) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_cpu_variable_set_rng_state(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<cpp11::raws>>(rng_state)));
  END_CPP11
}
// variable.cpp
SEXP dust_cpu_variable_set_data(SEXP ptr, cpp11::list data);
extern "C" SEXP _dust_dust_cpu_variable_set_data(SEXP ptr, SEXP data) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_cpu_variable_set_data(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<cpp11::list>>(data)));
  END_CPP11
}
// variable.cpp
SEXP dust_cpu_variable_compare_data(SEXP ptr);
extern "C" SEXP _dust_dust_cpu_variable_compare_data(SEXP ptr) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_cpu_variable_compare_data(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr)));
  END_CPP11
}
// variable.cpp
SEXP dust_cpu_variable_filter(SEXP ptr, bool save_trajectories, cpp11::sexp step_snapshot);
extern "C" SEXP _dust_dust_cpu_variable_filter(SEXP ptr, SEXP save_trajectories, SEXP step_snapshot) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_cpu_variable_filter(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<bool>>(save_trajectories), cpp11::as_cpp<cpp11::decay_t<cpp11::sexp>>(step_snapshot)));
  END_CPP11
}
// variable.cpp
void dust_cpu_variable_set_n_threads(SEXP ptr, int n_threads);
extern "C" SEXP _dust_dust_cpu_variable_set_n_threads(SEXP ptr, SEXP n_threads) {
  BEGIN_CPP11
    dust_cpu_variable_set_n_threads(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<int>>(n_threads));
    return R_NilValue;
  END_CPP11
}
// variable.cpp
int dust_cpu_variable_n_state(SEXP ptr);
extern "C" SEXP _dust_dust_cpu_variable_n_state(SEXP ptr) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_cpu_variable_n_state(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr)));
  END_CPP11
}
// variable.cpp
SEXP dust_gpu_variable_alloc(cpp11::list r_pars, bool pars_multi, size_t step, cpp11::sexp r_n_particles, size_t n_threads, cpp11::sexp r_seed, bool deterministic, cpp11::sexp gpu_config);
extern "C" SEXP _dust_dust_gpu_variable_alloc(SEXP r_pars, SEXP pars_multi, SEXP step, SEXP r_n_particles, SEXP n_threads, SEXP r_seed, SEXP deterministic, SEXP gpu_config) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_gpu_variable_alloc(cpp11::as_cpp<cpp11::decay_t<cpp11::list>>(r_pars), cpp11::as_cpp<cpp11::decay_t<bool>>(pars_multi), cpp11::as_cpp<cpp11::decay_t<size_t>>(step), cpp11::as_cpp<cpp11::decay_t<cpp11::sexp>>(r_n_particles), cpp11::as_cpp<cpp11::decay_t<size_t>>(n_threads), cpp11::as_cpp<cpp11::decay_t<cpp11::sexp>>(r_seed), cpp11::as_cpp<cpp11::decay_t<bool>>(deterministic), cpp11::as_cpp<cpp11::decay_t<cpp11::sexp>>(gpu_config)));
  END_CPP11
}
// variable.cpp
SEXP dust_gpu_variable_run(SEXP ptr, size_t step_end);
extern "C" SEXP _dust_dust_gpu_variable_run(SEXP ptr, SEXP step_end) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_gpu_variable_run(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<size_t>>(step_end)));
  END_CPP11
}
// variable.cpp
SEXP dust_gpu_variable_simulate(SEXP ptr, cpp11::sexp step_end);
extern "C" SEXP _dust_dust_gpu_variable_simulate(SEXP ptr, SEXP step_end) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_gpu_variable_simulate(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<cpp11::sexp>>(step_end)));
  END_CPP11
}
// variable.cpp
SEXP dust_gpu_variable_set_index(SEXP ptr, cpp11::sexp r_index);
extern "C" SEXP _dust_dust_gpu_variable_set_index(SEXP ptr, SEXP r_index) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_gpu_variable_set_index(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<cpp11::sexp>>(r_index)));
  END_CPP11
}
// variable.cpp
SEXP dust_gpu_variable_update_state(SEXP ptr, SEXP r_pars, SEXP r_state, SEXP r_step, SEXP r_set_initial_state);
extern "C" SEXP _dust_dust_gpu_variable_update_state(SEXP ptr, SEXP r_pars, SEXP r_state, SEXP r_step, SEXP r_set_initial_state) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_gpu_variable_update_state(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<SEXP>>(r_pars), cpp11::as_cpp<cpp11::decay_t<SEXP>>(r_state), cpp11::as_cpp<cpp11::decay_t<SEXP>>(r_step), cpp11::as_cpp<cpp11::decay_t<SEXP>>(r_set_initial_state)));
  END_CPP11
}
// variable.cpp
SEXP dust_gpu_variable_state(SEXP ptr, SEXP r_index);
extern "C" SEXP _dust_dust_gpu_variable_state(SEXP ptr, SEXP r_index) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_gpu_variable_state(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<SEXP>>(r_index)));
  END_CPP11
}
// variable.cpp
size_t dust_gpu_variable_step(SEXP ptr);
extern "C" SEXP _dust_dust_gpu_variable_step(SEXP ptr) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_gpu_variable_step(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr)));
  END_CPP11
}
// variable.cpp
void dust_gpu_variable_reorder(SEXP ptr, cpp11::sexp r_index);
extern "C" SEXP _dust_dust_gpu_variable_reorder(SEXP ptr, SEXP r_index) {
  BEGIN_CPP11
    dust_gpu_variable_reorder(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<cpp11::sexp>>(r_index));
    return R_NilValue;
  END_CPP11
}
// variable.cpp
SEXP dust_gpu_variable_resample(SEXP ptr, cpp11::doubles r_weights);
extern "C" SEXP _dust_dust_gpu_variable_resample(SEXP ptr, SEXP r_weights) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_gpu_variable_resample(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(r_weights)));
  END_CPP11
}
// variable.cpp
SEXP dust_gpu_variable_rng_state(SEXP ptr, bool first_only, bool last_only);
extern "C" SEXP _dust_dust_gpu_variable_rng_state(SEXP ptr, SEXP first_only, SEXP last_only) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_gpu_variable_rng_state(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<bool>>(first_only), cpp11::as_cpp<cpp11::decay_t<bool>>(last_only)));
  END_CPP11
}
// variable.cpp
SEXP dust_gpu_variable_set_rng_state(SEXP ptr, cpp11::raws rng_state);
extern "C" SEXP _dust_dust_gpu_variable_set_rng_state(SEXP ptr, SEXP rng_state) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_gpu_variable_set_rng_state(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<cpp11::raws>>(rng_state)));
  END_CPP11
}
// variable.cpp
SEXP dust_gpu_variable_set_data(SEXP ptr, cpp11::list data);
extern "C" SEXP _dust_dust_gpu_variable_set_data(SEXP ptr, SEXP data) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_gpu_variable_set_data(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<cpp11::list>>(data)));
  END_CPP11
}
// variable.cpp
SEXP dust_gpu_variable_compare_data(SEXP ptr);
extern "C" SEXP _dust_dust_gpu_variable_compare_data(SEXP ptr) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_gpu_variable_compare_data(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr)));
  END_CPP11
}
// variable.cpp
SEXP dust_gpu_variable_filter(SEXP ptr, bool save_trajectories, cpp11::sexp step_snapshot);
extern "C" SEXP _dust_dust_gpu_variable_filter(SEXP ptr, SEXP save_trajectories, SEXP step_snapshot) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_gpu_variable_filter(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<bool>>(save_trajectories), cpp11::as_cpp<cpp11::decay_t<cpp11::sexp>>(step_snapshot)));
  END_CPP11
}
// variable.cpp
void dust_gpu_variable_set_n_threads(SEXP ptr, int n_threads);
extern "C" SEXP _dust_dust_gpu_variable_set_n_threads(SEXP ptr, SEXP n_threads) {
  BEGIN_CPP11
    dust_gpu_variable_set_n_threads(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<int>>(n_threads));
    return R_NilValue;
  END_CPP11
}
// variable.cpp
int dust_gpu_variable_n_state(SEXP ptr);
extern "C" SEXP _dust_dust_gpu_variable_n_state(SEXP ptr) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_gpu_variable_n_state(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr)));
  END_CPP11
}
// volatility.cpp
cpp11::sexp dust_volatility_capabilities();
extern "C" SEXP _dust_dust_volatility_capabilities() {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_volatility_capabilities());
  END_CPP11
}
// volatility.cpp
cpp11::sexp dust_volatility_gpu_info();
extern "C" SEXP _dust_dust_volatility_gpu_info() {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_volatility_gpu_info());
  END_CPP11
}
// volatility.cpp
SEXP dust_cpu_volatility_alloc(cpp11::list r_pars, bool pars_multi, size_t step, cpp11::sexp r_n_particles, size_t n_threads, cpp11::sexp r_seed, bool deterministic, cpp11::sexp gpu_config);
extern "C" SEXP _dust_dust_cpu_volatility_alloc(SEXP r_pars, SEXP pars_multi, SEXP step, SEXP r_n_particles, SEXP n_threads, SEXP r_seed, SEXP deterministic, SEXP gpu_config) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_cpu_volatility_alloc(cpp11::as_cpp<cpp11::decay_t<cpp11::list>>(r_pars), cpp11::as_cpp<cpp11::decay_t<bool>>(pars_multi), cpp11::as_cpp<cpp11::decay_t<size_t>>(step), cpp11::as_cpp<cpp11::decay_t<cpp11::sexp>>(r_n_particles), cpp11::as_cpp<cpp11::decay_t<size_t>>(n_threads), cpp11::as_cpp<cpp11::decay_t<cpp11::sexp>>(r_seed), cpp11::as_cpp<cpp11::decay_t<bool>>(deterministic), cpp11::as_cpp<cpp11::decay_t<cpp11::sexp>>(gpu_config)));
  END_CPP11
}
// volatility.cpp
SEXP dust_cpu_volatility_run(SEXP ptr, size_t step_end);
extern "C" SEXP _dust_dust_cpu_volatility_run(SEXP ptr, SEXP step_end) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_cpu_volatility_run(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<size_t>>(step_end)));
  END_CPP11
}
// volatility.cpp
SEXP dust_cpu_volatility_simulate(SEXP ptr, cpp11::sexp step_end);
extern "C" SEXP _dust_dust_cpu_volatility_simulate(SEXP ptr, SEXP step_end) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_cpu_volatility_simulate(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<cpp11::sexp>>(step_end)));
  END_CPP11
}
// volatility.cpp
SEXP dust_cpu_volatility_set_index(SEXP ptr, cpp11::sexp r_index);
extern "C" SEXP _dust_dust_cpu_volatility_set_index(SEXP ptr, SEXP r_index) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_cpu_volatility_set_index(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<cpp11::sexp>>(r_index)));
  END_CPP11
}
// volatility.cpp
SEXP dust_cpu_volatility_update_state(SEXP ptr, SEXP r_pars, SEXP r_state, SEXP r_step, SEXP r_set_initial_state);
extern "C" SEXP _dust_dust_cpu_volatility_update_state(SEXP ptr, SEXP r_pars, SEXP r_state, SEXP r_step, SEXP r_set_initial_state) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_cpu_volatility_update_state(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<SEXP>>(r_pars), cpp11::as_cpp<cpp11::decay_t<SEXP>>(r_state), cpp11::as_cpp<cpp11::decay_t<SEXP>>(r_step), cpp11::as_cpp<cpp11::decay_t<SEXP>>(r_set_initial_state)));
  END_CPP11
}
// volatility.cpp
SEXP dust_cpu_volatility_state(SEXP ptr, SEXP r_index);
extern "C" SEXP _dust_dust_cpu_volatility_state(SEXP ptr, SEXP r_index) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_cpu_volatility_state(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<SEXP>>(r_index)));
  END_CPP11
}
// volatility.cpp
size_t dust_cpu_volatility_step(SEXP ptr);
extern "C" SEXP _dust_dust_cpu_volatility_step(SEXP ptr) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_cpu_volatility_step(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr)));
  END_CPP11
}
// volatility.cpp
void dust_cpu_volatility_reorder(SEXP ptr, cpp11::sexp r_index);
extern "C" SEXP _dust_dust_cpu_volatility_reorder(SEXP ptr, SEXP r_index) {
  BEGIN_CPP11
    dust_cpu_volatility_reorder(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<cpp11::sexp>>(r_index));
    return R_NilValue;
  END_CPP11
}
// volatility.cpp
SEXP dust_cpu_volatility_resample(SEXP ptr, cpp11::doubles r_weights);
extern "C" SEXP _dust_dust_cpu_volatility_resample(SEXP ptr, SEXP r_weights) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_cpu_volatility_resample(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(r_weights)));
  END_CPP11
}
// volatility.cpp
SEXP dust_cpu_volatility_rng_state(SEXP ptr, bool first_only, bool last_only);
extern "C" SEXP _dust_dust_cpu_volatility_rng_state(SEXP ptr, SEXP first_only, SEXP last_only) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_cpu_volatility_rng_state(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<bool>>(first_only), cpp11::as_cpp<cpp11::decay_t<bool>>(last_only)));
  END_CPP11
}
// volatility.cpp
SEXP dust_cpu_volatility_set_rng_state(SEXP ptr, cpp11::raws rng_state);
extern "C" SEXP _dust_dust_cpu_volatility_set_rng_state(SEXP ptr, SEXP rng_state) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_cpu_volatility_set_rng_state(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<cpp11::raws>>(rng_state)));
  END_CPP11
}
// volatility.cpp
SEXP dust_cpu_volatility_set_data(SEXP ptr, cpp11::list data);
extern "C" SEXP _dust_dust_cpu_volatility_set_data(SEXP ptr, SEXP data) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_cpu_volatility_set_data(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<cpp11::list>>(data)));
  END_CPP11
}
// volatility.cpp
SEXP dust_cpu_volatility_compare_data(SEXP ptr);
extern "C" SEXP _dust_dust_cpu_volatility_compare_data(SEXP ptr) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_cpu_volatility_compare_data(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr)));
  END_CPP11
}
// volatility.cpp
SEXP dust_cpu_volatility_filter(SEXP ptr, bool save_trajectories, cpp11::sexp step_snapshot);
extern "C" SEXP _dust_dust_cpu_volatility_filter(SEXP ptr, SEXP save_trajectories, SEXP step_snapshot) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_cpu_volatility_filter(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<bool>>(save_trajectories), cpp11::as_cpp<cpp11::decay_t<cpp11::sexp>>(step_snapshot)));
  END_CPP11
}
// volatility.cpp
void dust_cpu_volatility_set_n_threads(SEXP ptr, int n_threads);
extern "C" SEXP _dust_dust_cpu_volatility_set_n_threads(SEXP ptr, SEXP n_threads) {
  BEGIN_CPP11
    dust_cpu_volatility_set_n_threads(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<int>>(n_threads));
    return R_NilValue;
  END_CPP11
}
// volatility.cpp
int dust_cpu_volatility_n_state(SEXP ptr);
extern "C" SEXP _dust_dust_cpu_volatility_n_state(SEXP ptr) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_cpu_volatility_n_state(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr)));
  END_CPP11
}
// walk.cpp
cpp11::sexp dust_walk_capabilities();
extern "C" SEXP _dust_dust_walk_capabilities() {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_walk_capabilities());
  END_CPP11
}
// walk.cpp
cpp11::sexp dust_walk_gpu_info();
extern "C" SEXP _dust_dust_walk_gpu_info() {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_walk_gpu_info());
  END_CPP11
}
// walk.cpp
SEXP dust_cpu_walk_alloc(cpp11::list r_pars, bool pars_multi, size_t step, cpp11::sexp r_n_particles, size_t n_threads, cpp11::sexp r_seed, bool deterministic, cpp11::sexp gpu_config);
extern "C" SEXP _dust_dust_cpu_walk_alloc(SEXP r_pars, SEXP pars_multi, SEXP step, SEXP r_n_particles, SEXP n_threads, SEXP r_seed, SEXP deterministic, SEXP gpu_config) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_cpu_walk_alloc(cpp11::as_cpp<cpp11::decay_t<cpp11::list>>(r_pars), cpp11::as_cpp<cpp11::decay_t<bool>>(pars_multi), cpp11::as_cpp<cpp11::decay_t<size_t>>(step), cpp11::as_cpp<cpp11::decay_t<cpp11::sexp>>(r_n_particles), cpp11::as_cpp<cpp11::decay_t<size_t>>(n_threads), cpp11::as_cpp<cpp11::decay_t<cpp11::sexp>>(r_seed), cpp11::as_cpp<cpp11::decay_t<bool>>(deterministic), cpp11::as_cpp<cpp11::decay_t<cpp11::sexp>>(gpu_config)));
  END_CPP11
}
// walk.cpp
SEXP dust_cpu_walk_run(SEXP ptr, size_t step_end);
extern "C" SEXP _dust_dust_cpu_walk_run(SEXP ptr, SEXP step_end) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_cpu_walk_run(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<size_t>>(step_end)));
  END_CPP11
}
// walk.cpp
SEXP dust_cpu_walk_simulate(SEXP ptr, cpp11::sexp step_end);
extern "C" SEXP _dust_dust_cpu_walk_simulate(SEXP ptr, SEXP step_end) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_cpu_walk_simulate(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<cpp11::sexp>>(step_end)));
  END_CPP11
}
// walk.cpp
SEXP dust_cpu_walk_set_index(SEXP ptr, cpp11::sexp r_index);
extern "C" SEXP _dust_dust_cpu_walk_set_index(SEXP ptr, SEXP r_index) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_cpu_walk_set_index(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<cpp11::sexp>>(r_index)));
  END_CPP11
}
// walk.cpp
SEXP dust_cpu_walk_update_state(SEXP ptr, SEXP r_pars, SEXP r_state, SEXP r_step, SEXP r_set_initial_state);
extern "C" SEXP _dust_dust_cpu_walk_update_state(SEXP ptr, SEXP r_pars, SEXP r_state, SEXP r_step, SEXP r_set_initial_state) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_cpu_walk_update_state(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<SEXP>>(r_pars), cpp11::as_cpp<cpp11::decay_t<SEXP>>(r_state), cpp11::as_cpp<cpp11::decay_t<SEXP>>(r_step), cpp11::as_cpp<cpp11::decay_t<SEXP>>(r_set_initial_state)));
  END_CPP11
}
// walk.cpp
SEXP dust_cpu_walk_state(SEXP ptr, SEXP r_index);
extern "C" SEXP _dust_dust_cpu_walk_state(SEXP ptr, SEXP r_index) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_cpu_walk_state(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<SEXP>>(r_index)));
  END_CPP11
}
// walk.cpp
size_t dust_cpu_walk_step(SEXP ptr);
extern "C" SEXP _dust_dust_cpu_walk_step(SEXP ptr) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_cpu_walk_step(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr)));
  END_CPP11
}
// walk.cpp
void dust_cpu_walk_reorder(SEXP ptr, cpp11::sexp r_index);
extern "C" SEXP _dust_dust_cpu_walk_reorder(SEXP ptr, SEXP r_index) {
  BEGIN_CPP11
    dust_cpu_walk_reorder(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<cpp11::sexp>>(r_index));
    return R_NilValue;
  END_CPP11
}
// walk.cpp
SEXP dust_cpu_walk_resample(SEXP ptr, cpp11::doubles r_weights);
extern "C" SEXP _dust_dust_cpu_walk_resample(SEXP ptr, SEXP r_weights) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_cpu_walk_resample(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(r_weights)));
  END_CPP11
}
// walk.cpp
SEXP dust_cpu_walk_rng_state(SEXP ptr, bool first_only, bool last_only);
extern "C" SEXP _dust_dust_cpu_walk_rng_state(SEXP ptr, SEXP first_only, SEXP last_only) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_cpu_walk_rng_state(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<bool>>(first_only), cpp11::as_cpp<cpp11::decay_t<bool>>(last_only)));
  END_CPP11
}
// walk.cpp
SEXP dust_cpu_walk_set_rng_state(SEXP ptr, cpp11::raws rng_state);
extern "C" SEXP _dust_dust_cpu_walk_set_rng_state(SEXP ptr, SEXP rng_state) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_cpu_walk_set_rng_state(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<cpp11::raws>>(rng_state)));
  END_CPP11
}
// walk.cpp
SEXP dust_cpu_walk_set_data(SEXP ptr, cpp11::list data);
extern "C" SEXP _dust_dust_cpu_walk_set_data(SEXP ptr, SEXP data) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_cpu_walk_set_data(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<cpp11::list>>(data)));
  END_CPP11
}
// walk.cpp
SEXP dust_cpu_walk_compare_data(SEXP ptr);
extern "C" SEXP _dust_dust_cpu_walk_compare_data(SEXP ptr) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_cpu_walk_compare_data(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr)));
  END_CPP11
}
// walk.cpp
SEXP dust_cpu_walk_filter(SEXP ptr, bool save_trajectories, cpp11::sexp step_snapshot);
extern "C" SEXP _dust_dust_cpu_walk_filter(SEXP ptr, SEXP save_trajectories, SEXP step_snapshot) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_cpu_walk_filter(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<bool>>(save_trajectories), cpp11::as_cpp<cpp11::decay_t<cpp11::sexp>>(step_snapshot)));
  END_CPP11
}
// walk.cpp
void dust_cpu_walk_set_n_threads(SEXP ptr, int n_threads);
extern "C" SEXP _dust_dust_cpu_walk_set_n_threads(SEXP ptr, SEXP n_threads) {
  BEGIN_CPP11
    dust_cpu_walk_set_n_threads(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<int>>(n_threads));
    return R_NilValue;
  END_CPP11
}
// walk.cpp
int dust_cpu_walk_n_state(SEXP ptr);
extern "C" SEXP _dust_dust_cpu_walk_n_state(SEXP ptr) {
  BEGIN_CPP11
    return cpp11::as_sexp(dust_cpu_walk_n_state(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr)));
  END_CPP11
}

extern "C" {
static const R_CallMethodDef CallEntries[] = {
    {"_dust_cpp_openmp_info",                   (DL_FUNC) &_dust_cpp_openmp_info,                   0},
    {"_dust_cpp_scale_log_weights",             (DL_FUNC) &_dust_cpp_scale_log_weights,             1},
    {"_dust_density_beta_binomial",             (DL_FUNC) &_dust_density_beta_binomial,             5},
    {"_dust_density_binomial",                  (DL_FUNC) &_dust_density_binomial,                  4},
    {"_dust_density_negative_binomial_mu",      (DL_FUNC) &_dust_density_negative_binomial_mu,      5},
    {"_dust_density_negative_binomial_prob",    (DL_FUNC) &_dust_density_negative_binomial_prob,    4},
    {"_dust_density_normal",                    (DL_FUNC) &_dust_density_normal,                    4},
    {"_dust_density_poisson",                   (DL_FUNC) &_dust_density_poisson,                   3},
    {"_dust_dust_cpu_sir_alloc",                (DL_FUNC) &_dust_dust_cpu_sir_alloc,                8},
    {"_dust_dust_cpu_sir_compare_data",         (DL_FUNC) &_dust_dust_cpu_sir_compare_data,         1},
    {"_dust_dust_cpu_sir_filter",               (DL_FUNC) &_dust_dust_cpu_sir_filter,               3},
    {"_dust_dust_cpu_sir_n_state",              (DL_FUNC) &_dust_dust_cpu_sir_n_state,              1},
    {"_dust_dust_cpu_sir_reorder",              (DL_FUNC) &_dust_dust_cpu_sir_reorder,              2},
    {"_dust_dust_cpu_sir_resample",             (DL_FUNC) &_dust_dust_cpu_sir_resample,             2},
    {"_dust_dust_cpu_sir_rng_state",            (DL_FUNC) &_dust_dust_cpu_sir_rng_state,            3},
    {"_dust_dust_cpu_sir_run",                  (DL_FUNC) &_dust_dust_cpu_sir_run,                  2},
    {"_dust_dust_cpu_sir_set_data",             (DL_FUNC) &_dust_dust_cpu_sir_set_data,             2},
    {"_dust_dust_cpu_sir_set_index",            (DL_FUNC) &_dust_dust_cpu_sir_set_index,            2},
    {"_dust_dust_cpu_sir_set_n_threads",        (DL_FUNC) &_dust_dust_cpu_sir_set_n_threads,        2},
    {"_dust_dust_cpu_sir_set_rng_state",        (DL_FUNC) &_dust_dust_cpu_sir_set_rng_state,        2},
    {"_dust_dust_cpu_sir_simulate",             (DL_FUNC) &_dust_dust_cpu_sir_simulate,             2},
    {"_dust_dust_cpu_sir_state",                (DL_FUNC) &_dust_dust_cpu_sir_state,                2},
    {"_dust_dust_cpu_sir_step",                 (DL_FUNC) &_dust_dust_cpu_sir_step,                 1},
    {"_dust_dust_cpu_sir_update_state",         (DL_FUNC) &_dust_dust_cpu_sir_update_state,         5},
    {"_dust_dust_cpu_sirs_alloc",               (DL_FUNC) &_dust_dust_cpu_sirs_alloc,               8},
    {"_dust_dust_cpu_sirs_compare_data",        (DL_FUNC) &_dust_dust_cpu_sirs_compare_data,        1},
    {"_dust_dust_cpu_sirs_filter",              (DL_FUNC) &_dust_dust_cpu_sirs_filter,              3},
    {"_dust_dust_cpu_sirs_n_state",             (DL_FUNC) &_dust_dust_cpu_sirs_n_state,             1},
    {"_dust_dust_cpu_sirs_reorder",             (DL_FUNC) &_dust_dust_cpu_sirs_reorder,             2},
    {"_dust_dust_cpu_sirs_resample",            (DL_FUNC) &_dust_dust_cpu_sirs_resample,            2},
    {"_dust_dust_cpu_sirs_rng_state",           (DL_FUNC) &_dust_dust_cpu_sirs_rng_state,           3},
    {"_dust_dust_cpu_sirs_run",                 (DL_FUNC) &_dust_dust_cpu_sirs_run,                 2},
    {"_dust_dust_cpu_sirs_set_data",            (DL_FUNC) &_dust_dust_cpu_sirs_set_data,            2},
    {"_dust_dust_cpu_sirs_set_index",           (DL_FUNC) &_dust_dust_cpu_sirs_set_index,           2},
    {"_dust_dust_cpu_sirs_set_n_threads",       (DL_FUNC) &_dust_dust_cpu_sirs_set_n_threads,       2},
    {"_dust_dust_cpu_sirs_set_rng_state",       (DL_FUNC) &_dust_dust_cpu_sirs_set_rng_state,       2},
    {"_dust_dust_cpu_sirs_simulate",            (DL_FUNC) &_dust_dust_cpu_sirs_simulate,            2},
    {"_dust_dust_cpu_sirs_state",               (DL_FUNC) &_dust_dust_cpu_sirs_state,               2},
    {"_dust_dust_cpu_sirs_step",                (DL_FUNC) &_dust_dust_cpu_sirs_step,                1},
    {"_dust_dust_cpu_sirs_update_state",        (DL_FUNC) &_dust_dust_cpu_sirs_update_state,        5},
    {"_dust_dust_cpu_variable_alloc",           (DL_FUNC) &_dust_dust_cpu_variable_alloc,           8},
    {"_dust_dust_cpu_variable_compare_data",    (DL_FUNC) &_dust_dust_cpu_variable_compare_data,    1},
    {"_dust_dust_cpu_variable_filter",          (DL_FUNC) &_dust_dust_cpu_variable_filter,          3},
    {"_dust_dust_cpu_variable_n_state",         (DL_FUNC) &_dust_dust_cpu_variable_n_state,         1},
    {"_dust_dust_cpu_variable_reorder",         (DL_FUNC) &_dust_dust_cpu_variable_reorder,         2},
    {"_dust_dust_cpu_variable_resample",        (DL_FUNC) &_dust_dust_cpu_variable_resample,        2},
    {"_dust_dust_cpu_variable_rng_state",       (DL_FUNC) &_dust_dust_cpu_variable_rng_state,       3},
    {"_dust_dust_cpu_variable_run",             (DL_FUNC) &_dust_dust_cpu_variable_run,             2},
    {"_dust_dust_cpu_variable_set_data",        (DL_FUNC) &_dust_dust_cpu_variable_set_data,        2},
    {"_dust_dust_cpu_variable_set_index",       (DL_FUNC) &_dust_dust_cpu_variable_set_index,       2},
    {"_dust_dust_cpu_variable_set_n_threads",   (DL_FUNC) &_dust_dust_cpu_variable_set_n_threads,   2},
    {"_dust_dust_cpu_variable_set_rng_state",   (DL_FUNC) &_dust_dust_cpu_variable_set_rng_state,   2},
    {"_dust_dust_cpu_variable_simulate",        (DL_FUNC) &_dust_dust_cpu_variable_simulate,        2},
    {"_dust_dust_cpu_variable_state",           (DL_FUNC) &_dust_dust_cpu_variable_state,           2},
    {"_dust_dust_cpu_variable_step",            (DL_FUNC) &_dust_dust_cpu_variable_step,            1},
    {"_dust_dust_cpu_variable_update_state",    (DL_FUNC) &_dust_dust_cpu_variable_update_state,    5},
    {"_dust_dust_cpu_volatility_alloc",         (DL_FUNC) &_dust_dust_cpu_volatility_alloc,         8},
    {"_dust_dust_cpu_volatility_compare_data",  (DL_FUNC) &_dust_dust_cpu_volatility_compare_data,  1},
    {"_dust_dust_cpu_volatility_filter",        (DL_FUNC) &_dust_dust_cpu_volatility_filter,        3},
    {"_dust_dust_cpu_volatility_n_state",       (DL_FUNC) &_dust_dust_cpu_volatility_n_state,       1},
    {"_dust_dust_cpu_volatility_reorder",       (DL_FUNC) &_dust_dust_cpu_volatility_reorder,       2},
    {"_dust_dust_cpu_volatility_resample",      (DL_FUNC) &_dust_dust_cpu_volatility_resample,      2},
    {"_dust_dust_cpu_volatility_rng_state",     (DL_FUNC) &_dust_dust_cpu_volatility_rng_state,     3},
    {"_dust_dust_cpu_volatility_run",           (DL_FUNC) &_dust_dust_cpu_volatility_run,           2},
    {"_dust_dust_cpu_volatility_set_data",      (DL_FUNC) &_dust_dust_cpu_volatility_set_data,      2},
    {"_dust_dust_cpu_volatility_set_index",     (DL_FUNC) &_dust_dust_cpu_volatility_set_index,     2},
    {"_dust_dust_cpu_volatility_set_n_threads", (DL_FUNC) &_dust_dust_cpu_volatility_set_n_threads, 2},
    {"_dust_dust_cpu_volatility_set_rng_state", (DL_FUNC) &_dust_dust_cpu_volatility_set_rng_state, 2},
    {"_dust_dust_cpu_volatility_simulate",      (DL_FUNC) &_dust_dust_cpu_volatility_simulate,      2},
    {"_dust_dust_cpu_volatility_state",         (DL_FUNC) &_dust_dust_cpu_volatility_state,         2},
    {"_dust_dust_cpu_volatility_step",          (DL_FUNC) &_dust_dust_cpu_volatility_step,          1},
    {"_dust_dust_cpu_volatility_update_state",  (DL_FUNC) &_dust_dust_cpu_volatility_update_state,  5},
    {"_dust_dust_cpu_walk_alloc",               (DL_FUNC) &_dust_dust_cpu_walk_alloc,               8},
    {"_dust_dust_cpu_walk_compare_data",        (DL_FUNC) &_dust_dust_cpu_walk_compare_data,        1},
    {"_dust_dust_cpu_walk_filter",              (DL_FUNC) &_dust_dust_cpu_walk_filter,              3},
    {"_dust_dust_cpu_walk_n_state",             (DL_FUNC) &_dust_dust_cpu_walk_n_state,             1},
    {"_dust_dust_cpu_walk_reorder",             (DL_FUNC) &_dust_dust_cpu_walk_reorder,             2},
    {"_dust_dust_cpu_walk_resample",            (DL_FUNC) &_dust_dust_cpu_walk_resample,            2},
    {"_dust_dust_cpu_walk_rng_state",           (DL_FUNC) &_dust_dust_cpu_walk_rng_state,           3},
    {"_dust_dust_cpu_walk_run",                 (DL_FUNC) &_dust_dust_cpu_walk_run,                 2},
    {"_dust_dust_cpu_walk_set_data",            (DL_FUNC) &_dust_dust_cpu_walk_set_data,            2},
    {"_dust_dust_cpu_walk_set_index",           (DL_FUNC) &_dust_dust_cpu_walk_set_index,           2},
    {"_dust_dust_cpu_walk_set_n_threads",       (DL_FUNC) &_dust_dust_cpu_walk_set_n_threads,       2},
    {"_dust_dust_cpu_walk_set_rng_state",       (DL_FUNC) &_dust_dust_cpu_walk_set_rng_state,       2},
    {"_dust_dust_cpu_walk_simulate",            (DL_FUNC) &_dust_dust_cpu_walk_simulate,            2},
    {"_dust_dust_cpu_walk_state",               (DL_FUNC) &_dust_dust_cpu_walk_state,               2},
    {"_dust_dust_cpu_walk_step",                (DL_FUNC) &_dust_dust_cpu_walk_step,                1},
    {"_dust_dust_cpu_walk_update_state",        (DL_FUNC) &_dust_dust_cpu_walk_update_state,        5},
    {"_dust_dust_gpu_sirs_alloc",               (DL_FUNC) &_dust_dust_gpu_sirs_alloc,               8},
    {"_dust_dust_gpu_sirs_compare_data",        (DL_FUNC) &_dust_dust_gpu_sirs_compare_data,        1},
    {"_dust_dust_gpu_sirs_filter",              (DL_FUNC) &_dust_dust_gpu_sirs_filter,              3},
    {"_dust_dust_gpu_sirs_n_state",             (DL_FUNC) &_dust_dust_gpu_sirs_n_state,             1},
    {"_dust_dust_gpu_sirs_reorder",             (DL_FUNC) &_dust_dust_gpu_sirs_reorder,             2},
    {"_dust_dust_gpu_sirs_resample",            (DL_FUNC) &_dust_dust_gpu_sirs_resample,            2},
    {"_dust_dust_gpu_sirs_rng_state",           (DL_FUNC) &_dust_dust_gpu_sirs_rng_state,           3},
    {"_dust_dust_gpu_sirs_run",                 (DL_FUNC) &_dust_dust_gpu_sirs_run,                 2},
    {"_dust_dust_gpu_sirs_set_data",            (DL_FUNC) &_dust_dust_gpu_sirs_set_data,            2},
    {"_dust_dust_gpu_sirs_set_index",           (DL_FUNC) &_dust_dust_gpu_sirs_set_index,           2},
    {"_dust_dust_gpu_sirs_set_n_threads",       (DL_FUNC) &_dust_dust_gpu_sirs_set_n_threads,       2},
    {"_dust_dust_gpu_sirs_set_rng_state",       (DL_FUNC) &_dust_dust_gpu_sirs_set_rng_state,       2},
    {"_dust_dust_gpu_sirs_simulate",            (DL_FUNC) &_dust_dust_gpu_sirs_simulate,            2},
    {"_dust_dust_gpu_sirs_state",               (DL_FUNC) &_dust_dust_gpu_sirs_state,               2},
    {"_dust_dust_gpu_sirs_step",                (DL_FUNC) &_dust_dust_gpu_sirs_step,                1},
    {"_dust_dust_gpu_sirs_update_state",        (DL_FUNC) &_dust_dust_gpu_sirs_update_state,        5},
    {"_dust_dust_gpu_variable_alloc",           (DL_FUNC) &_dust_dust_gpu_variable_alloc,           8},
    {"_dust_dust_gpu_variable_compare_data",    (DL_FUNC) &_dust_dust_gpu_variable_compare_data,    1},
    {"_dust_dust_gpu_variable_filter",          (DL_FUNC) &_dust_dust_gpu_variable_filter,          3},
    {"_dust_dust_gpu_variable_n_state",         (DL_FUNC) &_dust_dust_gpu_variable_n_state,         1},
    {"_dust_dust_gpu_variable_reorder",         (DL_FUNC) &_dust_dust_gpu_variable_reorder,         2},
    {"_dust_dust_gpu_variable_resample",        (DL_FUNC) &_dust_dust_gpu_variable_resample,        2},
    {"_dust_dust_gpu_variable_rng_state",       (DL_FUNC) &_dust_dust_gpu_variable_rng_state,       3},
    {"_dust_dust_gpu_variable_run",             (DL_FUNC) &_dust_dust_gpu_variable_run,             2},
    {"_dust_dust_gpu_variable_set_data",        (DL_FUNC) &_dust_dust_gpu_variable_set_data,        2},
    {"_dust_dust_gpu_variable_set_index",       (DL_FUNC) &_dust_dust_gpu_variable_set_index,       2},
    {"_dust_dust_gpu_variable_set_n_threads",   (DL_FUNC) &_dust_dust_gpu_variable_set_n_threads,   2},
    {"_dust_dust_gpu_variable_set_rng_state",   (DL_FUNC) &_dust_dust_gpu_variable_set_rng_state,   2},
    {"_dust_dust_gpu_variable_simulate",        (DL_FUNC) &_dust_dust_gpu_variable_simulate,        2},
    {"_dust_dust_gpu_variable_state",           (DL_FUNC) &_dust_dust_gpu_variable_state,           2},
    {"_dust_dust_gpu_variable_step",            (DL_FUNC) &_dust_dust_gpu_variable_step,            1},
    {"_dust_dust_gpu_variable_update_state",    (DL_FUNC) &_dust_dust_gpu_variable_update_state,    5},
    {"_dust_dust_rng_alloc",                    (DL_FUNC) &_dust_dust_rng_alloc,                    4},
    {"_dust_dust_rng_binomial",                 (DL_FUNC) &_dust_dust_rng_binomial,                 6},
    {"_dust_dust_rng_exponential",              (DL_FUNC) &_dust_dust_rng_exponential,              5},
    {"_dust_dust_rng_jump",                     (DL_FUNC) &_dust_dust_rng_jump,                     2},
    {"_dust_dust_rng_long_jump",                (DL_FUNC) &_dust_dust_rng_long_jump,                2},
    {"_dust_dust_rng_multinomial",              (DL_FUNC) &_dust_dust_rng_multinomial,              6},
    {"_dust_dust_rng_normal",                   (DL_FUNC) &_dust_dust_rng_normal,                   7},
    {"_dust_dust_rng_pointer_init",             (DL_FUNC) &_dust_dust_rng_pointer_init,             4},
    {"_dust_dust_rng_pointer_sync",             (DL_FUNC) &_dust_dust_rng_pointer_sync,             2},
    {"_dust_dust_rng_poisson",                  (DL_FUNC) &_dust_dust_rng_poisson,                  5},
    {"_dust_dust_rng_random_normal",            (DL_FUNC) &_dust_dust_rng_random_normal,            5},
    {"_dust_dust_rng_random_real",              (DL_FUNC) &_dust_dust_rng_random_real,              4},
    {"_dust_dust_rng_state",                    (DL_FUNC) &_dust_dust_rng_state,                    2},
    {"_dust_dust_rng_uniform",                  (DL_FUNC) &_dust_dust_rng_uniform,                  6},
    {"_dust_dust_sir_capabilities",             (DL_FUNC) &_dust_dust_sir_capabilities,             0},
    {"_dust_dust_sir_gpu_info",                 (DL_FUNC) &_dust_dust_sir_gpu_info,                 0},
    {"_dust_dust_sirs_capabilities",            (DL_FUNC) &_dust_dust_sirs_capabilities,            0},
    {"_dust_dust_sirs_gpu_info",                (DL_FUNC) &_dust_dust_sirs_gpu_info,                0},
    {"_dust_dust_variable_capabilities",        (DL_FUNC) &_dust_dust_variable_capabilities,        0},
    {"_dust_dust_variable_gpu_info",            (DL_FUNC) &_dust_dust_variable_gpu_info,            0},
    {"_dust_dust_volatility_capabilities",      (DL_FUNC) &_dust_dust_volatility_capabilities,      0},
    {"_dust_dust_volatility_gpu_info",          (DL_FUNC) &_dust_dust_volatility_gpu_info,          0},
    {"_dust_dust_walk_capabilities",            (DL_FUNC) &_dust_dust_walk_capabilities,            0},
    {"_dust_dust_walk_gpu_info",                (DL_FUNC) &_dust_dust_walk_gpu_info,                0},
    {"_dust_test_cuda_pars",                    (DL_FUNC) &_dust_test_cuda_pars,                    9},
    {"_dust_test_rng_pointer_get",              (DL_FUNC) &_dust_test_rng_pointer_get,              2},
    {"_dust_test_xoshiro_run",                  (DL_FUNC) &_dust_test_xoshiro_run,                  1},
    {NULL, NULL, 0}
};
}

extern "C" attribute_visible void R_init_dust(DllInfo* dll){
  R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
  R_useDynamicSymbols(dll, FALSE);
  R_forceSymbols(dll, TRUE);
}
