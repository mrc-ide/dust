// Generated by dust (version 0.9.0) - do not edit
#include <cpp11.hpp>
[[cpp11::register]]
SEXP dust_sirs_alloc(cpp11::list r_pars, bool pars_multi, size_t step,
                         cpp11::sexp r_n_particles, size_t n_threads,
                         cpp11::sexp r_seed, cpp11::sexp device_id);

[[cpp11::register]]
SEXP dust_sirs_run(SEXP ptr, size_t step_end, bool device);

[[cpp11::register]]
SEXP dust_sirs_simulate(SEXP ptr, cpp11::sexp step_end);

[[cpp11::register]]
SEXP dust_sirs_set_index(SEXP ptr, cpp11::sexp r_index);

[[cpp11::register]]
SEXP dust_sirs_set_state(SEXP ptr, SEXP r_state, SEXP r_step);

[[cpp11::register]]
SEXP dust_sirs_reset(SEXP ptr, cpp11::list r_pars, size_t step);

[[cpp11::register]]
SEXP dust_sirs_state(SEXP ptr, SEXP r_index);

[[cpp11::register]]
size_t dust_sirs_step(SEXP ptr);

[[cpp11::register]]
void dust_sirs_reorder(SEXP ptr, cpp11::sexp r_index);

[[cpp11::register]]
SEXP dust_sirs_resample(SEXP ptr, cpp11::doubles r_weights);

[[cpp11::register]]
SEXP dust_sirs_set_pars(SEXP ptr, cpp11::list r_pars);

[[cpp11::register]]
SEXP dust_sirs_rng_state(SEXP ptr, bool last_only);

[[cpp11::register]]
SEXP dust_sirs_set_rng_state(SEXP ptr, cpp11::raws rng_state);

[[cpp11::register]]
SEXP dust_sirs_set_data(SEXP ptr, cpp11::list data);

[[cpp11::register]]
SEXP dust_sirs_compare_data(SEXP ptr);

[[cpp11::register]]
SEXP dust_sirs_filter(SEXP ptr, bool save_trajectories,
                          cpp11::sexp step_snapshot,
                          bool device);

[[cpp11::register]]
cpp11::sexp dust_sirs_capabilities();

[[cpp11::register]]
void dust_sirs_set_n_threads(SEXP ptr, int n_threads);

[[cpp11::register]]
int dust_sirs_n_state(SEXP ptr);

[[cpp11::register]]
cpp11::sexp dust_sirs_device_info();

#include <dust/dust.hpp>
#include <dust/interface.hpp>

class sirs {
public:
  typedef float real_t;
  typedef dust::no_internal internal_t;

  struct ALIGN(16) data_t {
    double incidence;
  };

  struct shared_t {
    real_t S0;
    real_t I0;
    real_t R0;
    real_t alpha;
    real_t beta;
    real_t gamma;
    real_t dt;
    size_t freq;
    real_t exp_noise;
  };

  sirs(const dust::pars_t<sirs>& pars): shared(pars.shared) {
  }

  size_t size() {
    return 4;
  }

  std::vector<real_t> initial(size_t step) {
    std::vector<real_t> state(4);
    state[0] = shared->S0;
    state[1] = shared->I0;
    state[2] = shared->R0;
    state[3] = 0;
    return state;
  }

  void update(size_t step, const real_t * state,
              dust::rng_state_t<real_t>& rng_state,
              real_t * state_next) {
    real_t S = state[0];
    real_t I = state[1];
    real_t R = state[2];
    real_t N = S + I + R;

    real_t p_SI = 1 - exp(- shared->beta * I / N);
    real_t p_IR = 1 - exp(-(shared->gamma));
    real_t p_RS = 1 - exp(- shared->alpha);

    real_t n_SI = dust::distr::rbinom(rng_state, S, p_SI * shared->dt);
    real_t n_IR = dust::distr::rbinom(rng_state, I, p_IR * shared->dt);
    real_t n_RS = dust::distr::rbinom(rng_state, R, p_RS * shared->dt);

    state_next[0] = S - n_SI + n_RS;
    state_next[1] = I + n_SI - n_IR;
    state_next[2] = R + n_IR - n_RS;
    state_next[3] = (step % shared->freq == 0) ? n_SI : state[3] + n_SI;
  }

  real_t compare_data(const real_t * state, const data_t& data,
                      dust::rng_state_t<real_t>& rng_state) {
    const real_t incidence_modelled = state[3];
    const real_t incidence_observed = data.incidence;
    const real_t lambda = incidence_modelled +
      dust::distr::rexp(rng_state, shared->exp_noise);
    return dust::dpois(incidence_observed, lambda, true);
  }

private:
  dust::shared_ptr<sirs> shared;
};

namespace dust {
template <>
dust::pars_t<sirs> dust_pars<sirs>(cpp11::list pars) {
  // Initial state values
  sirs::real_t I0 = 10.0;
  sirs::real_t S0 = 1000.0;
  sirs::real_t R0 = 0.0;

  // Default rates
  sirs::real_t alpha = 0.1;
  sirs::real_t beta = 0.2;
  sirs::real_t gamma = 0.1;

  // Time scaling
  size_t freq = 1;
  sirs::real_t dt = 1 / static_cast<sirs::real_t>(freq);

  sirs::real_t exp_noise = 1e6;

  // Accept beta and gamma as optional elements
  // [[dust::param(beta, required = FALSE, default = 0.2)]]
  SEXP r_beta = pars["beta"];
  if (r_beta != R_NilValue) {
    beta = cpp11::as_cpp<sirs::real_t>(r_beta);
  }
  // [[dust::param(gamma, required = FALSE, default = 0.1)]]
  SEXP r_gamma = pars["gamma"];
  if (r_gamma != R_NilValue) {
    gamma = cpp11::as_cpp<sirs::real_t>(r_gamma);
  }

  sirs::shared_t shared{S0, I0, R0, alpha, beta, gamma, dt, freq, exp_noise};
  return dust::pars_t<sirs>(shared);
}

// The way that this is going to work is we will process a list
// *outside* of the C that will take (say) a df and convert it
// row-wise into a list with elements `step` and `data`, we will pass
// that in here. Then this function will be called once per data
// element to create the struct that will be used for future work.
template <>
sirs::data_t dust_data<sirs>(cpp11::list data) {
  return sirs::data_t{cpp11::as_cpp<double>(data["incidence"])};
}

template <>
struct has_gpu_support<sirs> : std::true_type {};

template <>
size_t device_shared_int_size<sirs>(dust::shared_ptr<sirs> shared) {
  return 1;
}

template <>
size_t device_shared_real_size<sirs>(dust::shared_ptr<sirs> shared) {
  return 5;
}

template <>
void device_shared_copy<sirs>(dust::shared_ptr<sirs> shared,
                              int * shared_int,
                              sirs::real_t * shared_real) {
  typedef sirs::real_t real_t;
  shared_real = dust::shared_copy<real_t>(shared_real, shared->alpha);
  shared_real = dust::shared_copy<real_t>(shared_real, shared->beta);
  shared_real = dust::shared_copy<real_t>(shared_real, shared->gamma);
  shared_real = dust::shared_copy<real_t>(shared_real, shared->dt);
  shared_real = dust::shared_copy<real_t>(shared_real, shared->exp_noise);
  shared_int = dust::shared_copy<int>(shared_int, shared->freq);
}

template <>
DEVICE void update_device<sirs>(size_t step,
                                const dust::interleaved<sirs::real_t> state,
                                dust::interleaved<int> internal_int,
                                dust::interleaved<sirs::real_t> internal_real,
                                const int * shared_int,
                                const sirs::real_t * shared_real,
                                dust::rng_state_t<sirs::real_t>& rng_state,
                                dust::interleaved<sirs::real_t> state_next) {
  typedef sirs::real_t real_t;
  const real_t alpha = shared_real[0];
  const real_t beta = shared_real[1];
  const real_t gamma = shared_real[2];
  const real_t dt = shared_real[3];
  const int freq = shared_int[0];
  const real_t S = state[0];
  const real_t I = state[1];
  const real_t R = state[2];
  const real_t N = S + I + R;
  const real_t p_SI = 1 - exp(- beta * I / N);
  const real_t p_IR = 1 - exp(- gamma);
  const real_t p_RS = 1 - exp(- alpha);
  const real_t n_SI = dust::distr::rbinom(rng_state, S, p_SI * dt);
  const real_t n_IR = dust::distr::rbinom(rng_state, I, p_IR * dt);
  const real_t n_RS = dust::distr::rbinom(rng_state, R, p_RS * dt);
  state_next[0] = S - n_SI + n_RS;
  state_next[1] = I + n_SI - n_IR;
  state_next[2] = R + n_IR - n_RS;
  state_next[3] = (step % freq == 0) ? n_SI : state[3] + n_SI;
}

template <>
DEVICE typename sirs::real_t compare_device<sirs>(const dust::interleaved<typename sirs::real_t> state,
                           const typename sirs::data_t * data,
                           dust::interleaved<int> internal_int,
                           dust::interleaved<typename sirs::real_t> internal_real,
                           const int * shared_int,
                           const typename sirs::real_t * shared_real,
                           dust::rng_state_t<typename sirs::real_t>& rng_state) {
  typedef sirs::real_t real_t;
  const real_t exp_noise = shared_real[4];
  const real_t incidence_modelled = state[3];
  const real_t incidence_observed = data->incidence;
  const real_t lambda = incidence_modelled +
    dust::distr::rexp(rng_state, exp_noise);
  return dust::dpois(incidence_observed, lambda, true);
}

}

SEXP dust_sirs_alloc(cpp11::list r_pars, bool pars_multi, size_t step,
                         cpp11::sexp r_n_particles, size_t n_threads,
                         cpp11::sexp r_seed, cpp11::sexp device_id) {
  return dust::r::dust_alloc<sirs>(r_pars, pars_multi, step, r_n_particles,
                                        n_threads, r_seed, device_id);
}

SEXP dust_sirs_run(SEXP ptr, size_t step_end, bool device) {
  return dust::r::dust_run<sirs>(ptr, step_end, device);
}

SEXP dust_sirs_simulate(SEXP ptr, cpp11::sexp step_end) {
  return dust::r::dust_simulate<sirs>(ptr, step_end);
}

SEXP dust_sirs_set_index(SEXP ptr, cpp11::sexp r_index) {
  dust::r::dust_set_index<sirs>(ptr, r_index);
  return R_NilValue;
}

SEXP dust_sirs_set_state(SEXP ptr, SEXP r_state, SEXP r_step) {
  dust::r::dust_set_state<sirs>(ptr, r_state, r_step);
  return R_NilValue;
}

SEXP dust_sirs_reset(SEXP ptr, cpp11::list r_pars, size_t step) {
  return dust::r::dust_reset<sirs>(ptr, r_pars, step);
}

SEXP dust_sirs_state(SEXP ptr, SEXP r_index) {
  return dust::r::dust_state<sirs>(ptr, r_index);
}

size_t dust_sirs_step(SEXP ptr) {
  return dust::r::dust_step<sirs>(ptr);
}

void dust_sirs_reorder(SEXP ptr, cpp11::sexp r_index) {
  return dust::r::dust_reorder<sirs>(ptr, r_index);
}

SEXP dust_sirs_resample(SEXP ptr, cpp11::doubles r_weights) {
  return dust::r::dust_resample<sirs>(ptr, r_weights);
}

SEXP dust_sirs_set_pars(SEXP ptr, cpp11::list r_pars) {
  return dust::r::dust_set_pars<sirs>(ptr, r_pars);
}

SEXP dust_sirs_rng_state(SEXP ptr, bool last_only) {
  return dust::r::dust_rng_state<sirs>(ptr, last_only);
}

SEXP dust_sirs_set_rng_state(SEXP ptr, cpp11::raws rng_state) {
  dust::r::dust_set_rng_state<sirs>(ptr, rng_state);
  return R_NilValue;
}

SEXP dust_sirs_set_data(SEXP ptr, cpp11::list data) {
  dust::r::dust_set_data<sirs>(ptr, data);
  return R_NilValue;
}

SEXP dust_sirs_compare_data(SEXP ptr) {
  return dust::r::dust_compare_data<sirs>(ptr);
}

SEXP dust_sirs_filter(SEXP ptr, bool save_trajectories,
                          cpp11::sexp step_snapshot,
                          bool device) {
  return dust::r::dust_filter<sirs>(ptr, save_trajectories, step_snapshot, device);
}

cpp11::sexp dust_sirs_capabilities() {
  return dust::r::dust_capabilities<sirs>();
}

void dust_sirs_set_n_threads(SEXP ptr, int n_threads) {
  return dust::r::dust_set_n_threads<sirs>(ptr, n_threads);
}

int dust_sirs_n_state(SEXP ptr) {
  return dust::r::dust_n_state<sirs>(ptr);
}

cpp11::sexp dust_sirs_device_info() {
  return dust::cuda::device_info<sirs>();
}
