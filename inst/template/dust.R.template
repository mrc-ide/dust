{{name}} <- R6::R6Class(
  "dust",
  cloneable = FALSE,

  private = list(
    pars_ = NULL,
    pars_multi_ = NULL,
    index_ = NULL,
    info_ = NULL,
    n_threads_ = NULL,
    ptr_ = NULL,
    param_ = {{param}},

    simulate = function(steps, pars, state, index = NULL,
                        n_threads = 1L, seed = NULL,
                        return_state = FALSE) {
      dust_{{name}}_simulate(steps, pars, state, index, n_threads, seed,
                             return_state)
    },

    check_pars_multi = function(pars, len) {
      if (!is.list(pars) || !is.null(names(pars))) {
        stop("Expected 'pars' to be an unnamed list as 'pars_multi' is used")
      }
      n <- length(private$pars_)
      if (n == 0 && length(pars) == 0) {
        stop("Expected 'pars' to have at least one element")
      } else if (n > 0 && length(pars) != n) {
        stop(sprintf("Expected 'pars' to have %d elements", n))
      }
    }
  ),

  public = list(
    ##' @description
    ##' Create a new model. Note that the behaviour of this object
    ##' created by this function will change considerably based on
    ##' whether the `pars_multi` argument is `TRUE`. If not (the
    ##' default) then we create `n_particles` which all share the same
    ##' parameters as specified by the `pars` argument. If `pars_multi`
    ##' is `TRUE` then `pars` must be an unnamed list, and each element
    ##' of it represents a different set of parameters. We will
    ##' create `length(pars)` *sets* of `n_particles` particles which
    ##' will be simulated together. These particles must have the same
    ##' dimension - that is, they must correspond to model state that
    ##' is the same size.
    ##'
    ##' @param pars Data to initialise your model with; a `list`
    ##' object, but the required elements will depend on the details of
    ##' your model. If `pars_multi` is `TRUE`, then this must be an
    ##' *unnamed* list of `pars` objects (see Details).
    ##'
    ##' @param step Initial step - must be nonnegative
    ##'
    ##' @param n_particles Number of particles to create - must be at
    ##' least 1
    ##'
    ##' @param n_threads Number of OMP threads to use, if `dust` and
    ##' your model were compiled with OMP support (details to come).
    ##' `n_particles` should be a multiple of `n_threads` (e.g., if you use 8
    ##' threads, then you should have 8, 16, 24, etc particles). However, this
    ##' is not compulsary.
    ##'
    ##' @param seed The seed to use for the random number generator. Can
    ##' be a positive integer, `NULL` (initialise with R's random number
    ##' generator) or a `raw` vector of a length that is a multiple of
    ##' 32 to directly initialise the generator (e..g., from the
    ##' [`dust`] object's `$rng_state()` method).
    ##'
    ##' @param pars_multi Logical, indicating if `pars` should be
    ##' interpreted as a set of different initialisations, and that we
    ##' should prepare `n_particles * length(pars)` particles for
    ##' simulation. This has an effect on many of the other methods of
    ##' the object.
    initialize = function(pars, step, n_particles, n_threads = 1L,
                          seed = NULL, pars_multi = FALSE) {
      if (pars_multi) {
        private$check_pars_multi(pars)
      }
      res <- dust_{{name}}_alloc(pars, pars_multi, step, n_particles,
                        n_threads, seed)
      private$pars_ <- pars
      private$pars_multi_ <- pars_multi
      private$n_threads_ <- n_threads
      private$ptr_ <- res[[1L]]
      private$info_ <- res[[2L]]
    },

    ##' @description
    ##' Returns friendly model name
    name = function() {
      "{{name}}"
    },

    ##' @description
    ##' Returns parameter information, if provided by the model. This
    ##' describes the contents of pars passed to the constructor or to
    ##' `reset` as the `pars` argument, and the details depend on the model.
    param = function() {
      private$param_
    },

    ##' @description
    ##' Run the model up to a point in time, returning the filtered state
    ##' at that point.
    ##'
    ##' @param step_end Step to run to (if less than or equal to the current
    ##' step(), silently nothing will happen)
    run = function(step_end) {
      m <- dust_{{name}}_run(private$ptr_, step_end)
      rownames(m) <- names(private$index_)
      m
    },

    ##' @description
    ##' Set the "index" vector that is used to return a subset of pars
    ##' after using `run()`. If this is not used then `run()` returns
    ##' all elements in your state vector, which may be excessive and slower
    ##' than necessary. This method must be called after any
    ##' call to `reset()` as `reset()` may change the size of the state
    ##' and that will invalidate the index.
    ##'
    ##' @param index The index vector - must be an integer vector with
    ##' elements between 1 and the length of the state (this will be
    ##' validated, and an error thrown if an invalid index is given).
    set_index = function(index) {
      dust_{{name}}_set_index(private$ptr_, index)
      private$index_ <- index
      invisible()
    },

    ##' @description
    ##' Returns the `index` as set by `$set_index`
    index = function() {
      private$index_
    },

    ##' @description
    ##' Returns the number of threads that the model was constructed with
    n_threads = function() {
      private$n_threads_
    },

    ##' @description
    ##' Set the "state" vector for all particles, overriding whatever your
    ##' models `initial()` method provides.
    ##'
    ##' @param state The state vector - can be either a numeric vector with the
    ##' same length as the model's current state (in which case the same
    ##' state is applied to all particles), or a numeric matrix with as
    ##' many rows as your model's state and as many columns as you have
    ##' particles (in which case you can set a number of different starting
    ##' states at once).
    ##'
    ##' @param step If not `NULL`, then this sets the initial step. If this
    ##' is a vector (with the same length as the number of particles), then
    ##' particles are started from different initial steps and run up to the
    ##' larges step given (i.e., `max(step)`)
    set_state = function(state, step = NULL) {
      dust_{{name}}_set_state(private$ptr_, state, step)
    },

    ##' @description
    ##' Reset the model while preserving the random number stream state
    ##'
    ##' @param pars New pars for the model (see constructor)
    ##' @param step New initial step for the model (see constructor)
    reset = function(pars, step) {
      if (private$pars_multi_) {
        private$check_pars_multi(pars)
      }
      private$info_ <- dust_{{name}}_reset(private$ptr_, pars, step)
      private$index_ <- NULL
      private$pars_ <- pars
      invisible()
    },

    ##' @description
    ##' Set the 'pars' element in a dust object while holding model state,
    ##' index, etc constant. In contrast to `$reset`, the old state must
    ##' be compatible with the new one (e.g., don't change model size), and
    ##' the index will remain valid.
    ##'
    ##' @param pars New pars for the model (see constructor)
    set_pars = function(pars) {
      if (private$pars_multi_) {
        private$check_pars_multi(pars)
      }
      private$info_ <- dust_{{name}}_set_pars(private$ptr_, pars)
      private$pars_ <- pars
    },

    ##' @description
    ##' Return full model state
    ##' @param index Optional index to select state using
    state = function(index = NULL) {
      m <- dust_{{name}}_state(private$ptr_, index)
      rownames(m) <- names(index)
      m
    },

    ##' @description
    ##' Return current model step
    step = function() {
      dust_{{name}}_step(private$ptr_)
    },

    ##' @description
    ##' Reorder or resample particles.
    ##' @param index An integer vector, with values between 1 and n_particles,
    ##' indicating the index of the current particles that new particles should
    ##' take.
    reorder = function(index) {
      storage.mode(index) <- "integer"
      dust_{{name}}_reorder(private$ptr_, index)
      invisible()
    },

    ##' @description
    ##' Returns information about the pars that your model was created with.
    ##' Only returns non-NULL if the model provides a `dust_info` template
    ##' specialisation.
    info = function() {
      private$info_
    },

    ##' @description
    ##' Returns the `pars` object that your model was constructed with.
    pars = function() {
      private$pars_
    },

    ##' @description
    ##' Returns the state of the random number generator. This returns a
    ##' raw vector of length 32 * n_particles. This can be useful for
    ##' debugging or for initialising other dust objects.
    ##'
    ##' @param first_only Logical, indicating if we should return only the
    ##' *first* particle's random number state. If `FALSE` (the default)
    ##' all particles states are returned, being 32 bytes per particle.
    ##' If `TRUE` then we take just the first particle's state, which
    ##' will be a total of 32 bytes. Both forms are suitable for seeding
    ##' a new [`dust`] object as the shorter version will be used for
    ##' the first particle, followed by jumps for each subsequent particle.
    rng_state = function(first_only = FALSE) {
      dust_{{name}}_rng_state(private$ptr_, first_only)
    },

    ##' @description Set the random number state for this model. This
    ##' replaces the RNG state that the model is using with a state of
    ##' your choosing, saved out from a different model object. This method
    ##' is designed to support advanced use cases where it is easier to
    ##' manipulate the state of the random number generator than the
    ##' internal state of the dust object.
    ##'
    ##' @param rng_state A random number state, as saved out by the
    ##' `$rng_state()` method. Note that unlike `seed` as passed to the
    ##' constructor, this *must* be a raw vector of the expected length.
    set_rng_state = function(rng_state) {
      dust_{{name}}_set_rng_state(private$ptr_, rng_state)
      invisible()
    },

    ##' @description
    ##' Returns a logical, indicating if this model was compiled with
    ##' "OpenMP" support, in which case it will react to the `n_threads`
    ##' argument passed to the constructor. This method can also be used
    ##' as a static method by running it directly
    ##' as `{{name}}$public_methods$has_openmp()`
    has_openmp = function() {
      dust_{{name}}_has_openmp()
    },

    ##' @description
    ##' Returns the number of distinct pars elements required. This is `0`
    ##' where the object was initialised with `pars_multi = FALSE` and
    ##' an integer otherwise.  For multi-pars dust objects, Where `pars`
    ##' is accepted, you must provide an unnamed list of length `$n_pars()`.
    n_pars = function() {
      if (private$pars_multi_) length(private$pars_) else 0L
    },

    ##' @description
    ##' Change the number of threads that the dust object will use. Your
    ##' model must be compiled with "OpenMP" support for this to have an
    ##' effect. Returns (invisibly) the previous value.
    ##'
    ##' @param n_threads The new number of threads to use. You may want to
    ##'   wrap this argument in [dust::dust_openmp_threads()] in order to
    ##'   verify that you can actually use the number of threads
    ##'   requested (based on environment variables and OpenMP support).
    set_n_threads = function(n_threads) {
      prev <- private$n_threads_
      dust_{{name}}_set_n_threads(private$ptr_, n_threads)
      private$n_threads_ <- n_threads
      invisible(prev)
    },

    set_data = function(data) {
      dust_{{name}}_set_data(private$ptr_, data)
    },

    compare = function() {
      dust_{{name}}_compare(private$ptr_)
    }
  ))
class({{name}}) <- c("dust_generator", class({{name}}))
