// Generated by dust (version 0.0.7) - do not edit

typedef float real_t;
typedef int int_t;

#include <dust/gpu/cuda.cuh>
#include <dust/gpu/dust.hpp>
#include <dust/gpu/interface.hpp>

/*
#include <ctype.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <iostream>
*/

{{model}}

// Generated by odin.dust (version 0.0.3) - do not edit
class sireinfect {
public:
  typedef int int_t;
  typedef float real_t;
  struct init_t {
    real_t alpha;
    real_t beta;
    real_t gamma;
    real_t I_ini;
    real_t initial_I;
    real_t initial_R;
    real_t initial_S;
    real_t p_IR;
    real_t p_RS;
    real_t S_ini;
  };
  sireinfect(const init_t& data): internal(data) {
  }
  size_t size() {
    return 3;
  }
  std::vector<real_t> initial(size_t step) {
    std::vector<real_t> state(3);
    state[0] = internal.initial_S;
    state[1] = internal.initial_I;
    state[2] = internal.initial_R;
    return state;
  }
  __device__
  void update(size_t step, const real_t * state, real_t * state_next,
              dust::RNGState& rng_state) {
    const real_t S = state[0];
    const real_t I = state[1];
    const real_t R = state[2];
    real_t N = S + I + R;
    real_t n_IR = dust::distr::rbinom<real_t, int_t>(rng_state, rintf(I), internal.p_IR);
    real_t n_RS = dust::distr::rbinom<real_t, int_t>(rng_state, rintf(R), internal.p_RS);
    real_t p_SI = 1 - exp(- internal.beta * I / (real_t) N);
    real_t n_SI = dust::distr::rbinom<real_t, int_t>(rng_state, rintf(S), p_SI);
    state_next[2] = R + n_IR - n_RS;
    state_next[1] = I + n_SI - n_IR;
    state_next[0] = S - n_SI + n_RS;
  }
private:
  init_t internal;
};

SEXP dust_{{name}}_alloc(cpp11::list r_data, size_t step, size_t n_particles,
                size_t n_threads, size_t seed) {
  return dust_alloc<{{type}}>(r_data, step, n_particles, n_threads, seed);
}

SEXP dust_{{name}}_run(SEXP ptr, size_t step_end) {
  return dust_run<{{type}}>(ptr, step_end);
}

SEXP dust_{{name}}_set_index(SEXP ptr, cpp11::sexp r_index) {
  dust_set_index<{{type}}>(ptr, r_index);
  return R_NilValue;
}

SEXP dust_{{name}}_set_state(SEXP ptr, SEXP r_state, SEXP r_step) {
  dust_set_state<{{type}}>(ptr, r_state, r_step);
  return R_NilValue;
}

SEXP dust_{{name}}_reset(SEXP ptr, cpp11::list r_data, size_t step) {
  return dust_reset<{{type}}>(ptr, r_data, step);
}

SEXP dust_{{name}}_state(SEXP ptr, SEXP r_index) {
  return dust_state<{{type}}>(ptr, r_index);
}

size_t dust_{{name}}_step(SEXP ptr) {
  return dust_step<{{type}}>(ptr);
}

void dust_{{name}}_reorder(SEXP ptr, cpp11::sexp r_index) {
  return dust_reorder<{{type}}>(ptr, r_index);
}

SEXP dust_{{name}}_rng_state(SEXP ptr) {
  return dust_rng_state<{{type}}>(ptr);
}
