#!/usr/bin/env Rscript
zig_cpp_tables <- function(template, dest) {
  header <- "// Generated by scripts/update_ziggurat_tables - do not edit"

  n <- 256
  dat <- zig_constants(n)
  r <- dat$r
  v <- dat$v
  x <- c(v / f(r), intervals(n, r, v))
  y <- x[-1] / x[seq_len(n)]

  format <- function(z) {
    s <- vapply(z, deparse, "", control = "digits17")
    paste(
      strwrap(paste(s, collapse = ", "), width = 70, indent = 4, exdent = 4),
      collapse = "\n")
  }

  txt <- glue_whisker(template, list(x = format(x), y = format(y)))
  writeLines(txt, dest)
}


f <- function(x) {
  exp(-x^2 / 2)
}


f_inv <- function(y) {
  sqrt(-2 * log(y))
}


f_int <- function(r) {
  pnorm(r, lower.tail = FALSE) / dnorm(0)
}


intervals <- function(n, r, v) {
  x <- numeric(n)
  for (i in seq_len(n - 1)) {
    x[i] <- if (i == 1) r else f_inv(f(x[i - 1]) + v / x[i - 1])
  }
  x
}


## For derivation see:
## * https://www.doornik.com/research/ziggurat.pdf
## * https://en.wikipedia.org/wiki/Ziggurat_algorithm
zig_constants <- function(n, tolerance = 1e-10) {
  ## As for intervals but with more robustness to being out of bounds
  intervals <- function(n, r, v) {
    x <- numeric(n)
    for (i in seq_len(n - 1)) {
      if (i == 1) {
        x[i] <- r
      } else {
        y <- f(x[i - 1]) + v / x[i - 1]
        if (y > f(0)) {
          break
        }
        x[i] <- f_inv(y)
      }
    }
    x[[n - 1]]
  }
  g <- function(r) {
    v <- r * f(r) + f_int(r)
    x <- intervals(n, r, v)
    x * (f(0) - f(x)) - v
  }
  r <- uniroot2(g, c(1.4, 4), tol = tolerance)$root
  v <- r * f(r) + f_int(r)
  list(n = n, r = r, v = v)
}


## Helper for root polishing
uniroot2 <- function(f, bounds, ..., scal = 10) {
  res <- uniroot(f, bounds, ...)
  bounds2 <- c(res$root - res$estim.prec * scal,
               res$root + res$estim.prec * scal)
  uniroot(f, bounds2, ...)
}


glue_whisker <- function(template, data) {
  glue::glue(template, .envir = data, .open = "{{", .close = "}}",
             .trim = FALSE)
}


if (!interactive()) {
  root <- here::here()
  dest <- file.path(root, "inst/include/dust/random/normal_ziggurat_tables.hpp")
  template <- paste(
    readLines(file.path(root, "inst/template/normal_ziggurat_tables.hpp")),
    collapse = "\n")
  zig_cpp_tables(template, dest)
}
