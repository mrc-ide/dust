% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/openmp.R
\name{dust_openmp_threads}
\alias{dust_openmp_threads}
\title{Select number of threads}
\usage{
dust_openmp_threads(n = NULL, action = "error")
}
\arguments{
\item{n}{Either \code{NULL} (select automatically) or an integer as
your proposed number of threads.}

\item{action}{An action to perform if \code{n} exceeds the maximum
number of threads you can use. Options are "error" (the default,
throw an error), "fix" (print a message and reduce \code{n} down to
the limit) or "message" (print a message and continue anyway)}
}
\value{
An integer, indicating the number of threads that you can use
}
\description{
Politely select a number of threads to use. See Details for the algorithm
}
\details{
There are two limits and we will take the smaller of the two.

The first limit comes from piggy-backing off of R's normal
parallel configuration; we will use the \code{MC_CORES} environment
variable and \code{mc.cores} option as a guide to how many cores you
are happy to use. We take \code{mc.cores} first, then \code{MC_CORES}, which
is the same behaviour as \code{parallel::mclapply} and friends.

The second limit comes from openmp. If you do not have OpenMP
support, then we use one thread (higher numbers have no effect at
all in this case). If you do have OpenMP support, we take the
smallest of the number of "processors" (reported by
\code{omp_get_num_procs()}) the "max threads" (reported by
\code{omp_get_max_threads()} and "thread_limit" (reported by
\code{omp_get_thread_limit()}.

See \code{\link[=dust_openmp_support]{dust_openmp_support()}} for the values of all the values
that go into this calculation.
}
\examples{
# Default number of threads; tries to pick something friendly,
# erring on the conservative side.
dust::dust_openmp_threads(NULL)

# Try to pick something silly and it will be reduced for you
dust::dust_openmp_threads(1000, action = "fix")
}
