% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/interface.R
\name{dust_generate}
\alias{dust_generate}
\title{Generate dust code}
\usage{
dust_generate(
  filename,
  quiet = FALSE,
  workdir = NULL,
  gpu = FALSE,
  real_t = NULL,
  mangle = FALSE
)
}
\arguments{
\item{filename}{The path to a single C++ file}

\item{quiet}{Logical, indicating if compilation messages from
\code{pkgbuild} should be displayed.  Error messages will be
displayed on compilation failure regardless of the value used.}

\item{workdir}{Optional working directory to use.  If \code{NULL}
uses a temporary directory.  By using a different directory of
your choosing you can see the generated code.}

\item{gpu}{Logical, indicating if we should generate GPU
code. This requires a considerable amount of additional software
installed (CUDA toolkit and drivers) as well as a
CUDA-compatible GPU. If \code{TRUE}, then we call
\link{dust_cuda_options} with no arguments. Alternatively, call
that function and pass the value here (e.g, \code{gpu = dust::dust_cuda_options(debug = TRUE)}). Note that due to the
use of the \verb{__syncwarp()} primitive this may require a GPU with
compute version 70 or higher.}

\item{real_t}{Optionally, a string indicating a substitute type to
swap in for your model's \code{real_t} declaration. If given, then we
replace the string \verb{typedef (double|float) real_t} with the
given type. This is primarily intended to be used as \verb{gpu = TRUE, real_t = "float"} in order to create model for the GPU
that will use 32 bit \code{floats} (rather than 64 bit doubles, which
are much slower). For CPU models decreasing precision of your
real type will typically just decrease precision for no
additional performance.}

\item{mangle}{Logical, indicating if the model name should be
mangled when creating the package. This is safer if you will
load multiple copies of the package into a single session, but
is \code{FALSE} by default as the generated code is easier to read.}
}
\value{
The path to the generated package (will be \code{workdir} if
that was provided, otherwise a temporary directory).
}
\description{
Generate a package out of a dust model. The resulting package can
be installed or loaded via \code{pkgload::load_all()} though it
contains minimal metadata and if you want to create a persistant
package you should use \code{\link[=dust_package]{dust_package()}}.  This function is
intended for cases where you either want to inspect the code or
generate it once and load multiple times (useful in some workflows
with CUDA models).
}
\examples{
filename <- system.file("examples/walk.cpp", package = "dust")
path <- dust::dust_generate(filename)

# Simple package created:
dir(path)
dir(file.path(path, "R"))
dir(file.path(path, "src"))
}
