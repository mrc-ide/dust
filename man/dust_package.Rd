% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/package.R
\name{dust_package}
\alias{dust_package}
\title{Create dust model in package}
\usage{
dust_package(path, quiet = FALSE)
}
\arguments{
\item{path}{Path to the package}

\item{quiet}{Passed to \code{cpp11::cpp_register}, if \code{TRUE} suppresses
informational notices about updates to the cpp11 files}
}
\value{
Nothing, this function is called for its side effects
}
\description{
Updates a dust model in a package. The user-provided code is
assumed to the in \code{inst/dust} as a series of C++ files; a file
\code{inst/dust/model.cpp} will be transformed into a file
\code{src/model.cpp}.
}
\details{
If your code provides a class \code{model} then dust will create C++
functions such as \code{dust_model_alloc} - if your code also includes
names such as this, compilation will fail due to duplicate
symbols.

We add "cpp11 attributes" to the created functions, and will run
\code{\link[cpp11:cpp_register]{cpp11::cpp_register()}} on them once the generated code
has been created.

Your package needs a \code{src/Makevars} file to enable openmp (if your
system supports it). If it is not present then a suitable Makevars
will be written, containing\preformatted{PKG_CXXFLAGS=$(SHLIB_OPENMP_CXXFLAGS)
PKG_LIBS=$(SHLIB_OPENMP_CXXFLAGS)
}

following "Writing R Extensions" (see section "OpenMP support").
If your package does contain a \code{src/Makevars} file we do not
attempt to edit it but will error if it looks like it does not
contain these lines or similar.

You also need to make sure that your package loads the dynamic
library; if you are using roxygen, then you might create a file
(say, \code{R/zzz.R}) containing\preformatted{#' @useDynLib packagename, .registration = TRUE
NULL
}

substituting \code{packagename} for your package name as
appropriate. This will create an entry in \code{NAMESPACE}.
}
\examples{
# This is explained in more detail in the package vignette
path <- system.file("examples/sir.cpp", package = "dust", mustWork = TRUE)
dest <- tempfile()
dir.create(dest)
dir.create(file.path(dest, "inst/dust"), FALSE, TRUE)
writeLines(c("Package: example",
             "Version: 0.0.1",
             "LinkingTo: cpp11, dust",
             "SystemRequirements: C++11"),
           file.path(dest, "DESCRIPTION"))
writeLines("useDynLib('example', .registration = TRUE)",
           file.path(dest, "NAMESPACE"))
file.copy(path, file.path(dest, "inst/dust"))

# An absolutely minimal skeleton contains a DESCRIPTION, NAMESPACE
# and one or more dust model files to compile:
dir(dest, recursive = TRUE)

# Running dust_package will fill in the rest
dust::dust_package(dest)

# More files here now
dir(dest, recursive = TRUE)
}
\seealso{
\code{vignette("dust")} which contains more discussion of this
process
}
