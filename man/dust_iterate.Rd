% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/iterate.R
\name{dust_iterate}
\alias{dust_iterate}
\title{Iterate a dust model}
\usage{
dust_iterate(model, steps, index = NULL)
}
\arguments{
\item{model}{A model, compiled with \code{dust::dust()} and initialised}

\item{steps}{A vector of steps - the first step must be same as
the model's step (i.e., \verb{$step()})}

\item{index}{An optional index to filter the results with.}
}
\value{
A 3d array of model outputs. The first dimension is model
state, the second is particle number and the third is time, so
that \code{output[i, j, k]} is the \code{i}th variable, \code{j}th particle and
\code{k}th step.
}
\description{
Iterate a dust model over time. This is a wrapper around calling
\verb{$run()} and \verb{$state()} repeatedly without doing anything very
interesting with the data. It is provided mostly as a
quick-and-dirty way of getting started with a model.
}
\examples{
# Same random walk example as in ?dust
model <- dust::dust_example("walk")

# Create a model with 100 particles, starting at step 0
obj <- model$new(list(sd = 1), 0, 100)

# Steps that we want to report at:
steps <- seq(0, 400, by = 4)

# Run the simulation:
res <- dust::dust_iterate(obj, steps)

# Output is 1 x 100 x 100 (state, particle, time)
dim(res)

# Dropping the first dimension and plotting, with the mean in red
# and the expectation in blue:
xy <- t(res[1, , , drop = TRUE])
matplot(steps, xy, type = "l", lty = 1, col = "#00000033",
        xlab = "Step", ylab = "Value")
abline(h = 0, lty = 2, col = "blue")
lines(steps, rowMeans(xy), col = "red", lwd = 2)
}
