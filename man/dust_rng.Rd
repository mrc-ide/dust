% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rng.R
\name{dust_rng}
\alias{dust_rng}
\title{Dust Random Number Generator}
\value{
A \code{dust_rng} object, which can be used to drawn random
numbers from dust's distributions.
}
\description{
Create an object that can be used to generate random
numbers with the same RNG as dust uses internally.  This is
primarily meant for debugging and testing the underlying C++
rather than a source of random numbers from R.
}
\section{Running multiple streams, perhaps in parallel}{


The underlying random number generators are designed to work in
parallel, and with random access to parameters (see
\code{vignette("rng")} for more details).  However, this is usually
done within the context of running a model where each generator
sees its own stream of numbers.  We provide some support for
running random number generators in parallel, but any speed
gains from parallelisation are likely to be somewhat eroded by
the overhead of copying around a large number of random numbers.

All the random distribution functions support an argument
\code{n_threads} which controls the number of threads used.  This
argument will \emph{silently} have no effect if your installation
does not support OpenMP (see \link{dust_openmp_support}).

Parallelisation will be performed at the level of the generator,
with \emph{each} generator drawing \code{n} numbers for a total of \code{n * n_generators} random numbers.  Setting \code{n_threads} to be higher
than \code{n_generators} will therefore have no effect. If running on
somebody else's system (e.g., an HPC, CRAN) you must respect the
various environment variables that control the maximum allowable
number of threads; consider using \link{dust_openmp_threads} to
select a safe number.

With the exception of \code{random_real}, each random number
distribution accepts parameters; the interpretations of these
will depend on \code{n}, \code{n_generators} and their rank.
\itemize{
\item If a scalar then we will use the same parameter value for every draw
from every stream
\item If a vector with length \code{n} then we will draw \code{n} random
numbers per stream, and every stream will use the same parameter
value for every generator for each draw (but a different,
shared, parameter value for subsequent draws).
\item If a matrix is provided with one row and \code{n_generators}
columns then we use different parameters for each generator, but
the same parameter for each draw.
\item If a matrix is provided with \code{n} rows and \code{n_generators}
columns then we use a parameter value \verb{[i, j]} for the \code{i}th
draw on the \code{j}th stream.
}

The output will not differ based on the number of threads used,
only on the number of generators.
}

\examples{
rng <- dust::dust_rng$new(42)

# Shorthand for Uniform(0, 1)
rng$random_real(5)

# Uniform random numbers between min and max
rng$uniform(5, -2, 6)

# Normally distributed random numbers with mean and sd
rng$normal(5, 4, 2)

# Binomially distributed random numbers with size and prob
rng$binomial(5, 10, 0.3)

# Poisson distributed random numbers with mean lambda
rng$poisson(5, 2)

# Exponentially distributed random numbers with rate
rng$exponential(5, 2)
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{info}}{Information about the generator (read-only)}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{dust_rng$new()}}
\item \href{#method-size}{\code{dust_rng$size()}}
\item \href{#method-jump}{\code{dust_rng$jump()}}
\item \href{#method-long_jump}{\code{dust_rng$long_jump()}}
\item \href{#method-random_real}{\code{dust_rng$random_real()}}
\item \href{#method-uniform}{\code{dust_rng$uniform()}}
\item \href{#method-normal}{\code{dust_rng$normal()}}
\item \href{#method-binomial}{\code{dust_rng$binomial()}}
\item \href{#method-poisson}{\code{dust_rng$poisson()}}
\item \href{#method-exponential}{\code{dust_rng$exponential()}}
\item \href{#method-multinomial}{\code{dust_rng$multinomial()}}
\item \href{#method-state}{\code{dust_rng$state()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
Create a \code{dust_rng} object
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{dust_rng$new(
  seed,
  n_generators = 1L,
  real_type = "double",
  deterministic = FALSE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{seed}}{The seed, as an integer or as a raw vector.}

\item{\code{n_generators}}{The number of generators to use. While this
function never runs in parallel, this is used to create a set of
interleaved independent generators as dust would use in a model.}

\item{\code{real_type}}{The type of floating point number to use. Currently
only \code{float} and \code{double} are supported (with \code{double} being
the default). This will have no (or negligible) impact on speed,
but exists to test the low-precision generators.}

\item{\code{deterministic}}{Logical, indicating if we should use
"deterministic" mode where distributions return their
expectations and the state is never changed.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-size"></a>}}
\if{latex}{\out{\hypertarget{method-size}{}}}
\subsection{Method \code{size()}}{
Number of generators available
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{dust_rng$size()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-jump"></a>}}
\if{latex}{\out{\hypertarget{method-jump}{}}}
\subsection{Method \code{jump()}}{
The jump function for the generator, equivalent to
2^128 numbers drawn from the generator.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{dust_rng$jump()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-long_jump"></a>}}
\if{latex}{\out{\hypertarget{method-long_jump}{}}}
\subsection{Method \code{long_jump()}}{
The \code{long_jump} function for the generator, equivalent
to 2^192 numbers drawn from the generator.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{dust_rng$long_jump()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-random_real"></a>}}
\if{latex}{\out{\hypertarget{method-random_real}{}}}
\subsection{Method \code{random_real()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{dust_rng$random_real(n, n_threads = 1L)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{n}}{Number of samples to draw (per generator)}

\item{\code{n_threads}}{Number of threads to use; see Details}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-uniform"></a>}}
\if{latex}{\out{\hypertarget{method-uniform}{}}}
\subsection{Method \code{uniform()}}{
Generate \code{n} numbers from a uniform distribution
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{dust_rng$uniform(n, min, max, n_threads = 1L)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{n}}{Number of samples to draw (per generator)}

\item{\code{min}}{The minimum of the distribution (length 1 or n)}

\item{\code{max}}{The maximum of the distribution (length 1 or n)}

\item{\code{n_threads}}{Number of threads to use; see Details}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-normal"></a>}}
\if{latex}{\out{\hypertarget{method-normal}{}}}
\subsection{Method \code{normal()}}{
Generate \code{n} numbers from a normal distribution
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{dust_rng$normal(n, mean, sd, n_threads = 1L)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{n}}{Number of samples to draw (per generator)}

\item{\code{mean}}{The mean of the distribution (length 1 or n)}

\item{\code{sd}}{The standard deviation of the distribution (length 1 or n)}

\item{\code{n_threads}}{Number of threads to use; see Details}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-binomial"></a>}}
\if{latex}{\out{\hypertarget{method-binomial}{}}}
\subsection{Method \code{binomial()}}{
Generate \code{n} numbers from a binomial distribution
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{dust_rng$binomial(n, size, prob, n_threads = 1L)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{n}}{Number of samples to draw (per generator)}

\item{\code{size}}{The number of trials (zero or more, length 1 or n)}

\item{\code{prob}}{The probability of success on each trial
(between 0 and 1, length 1 or n)}

\item{\code{n_threads}}{Number of threads to use; see Details}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-poisson"></a>}}
\if{latex}{\out{\hypertarget{method-poisson}{}}}
\subsection{Method \code{poisson()}}{
Generate \code{n} numbers from a Poisson distribution
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{dust_rng$poisson(n, lambda, n_threads = 1L)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{n}}{Number of samples to draw (per generator)}

\item{\code{lambda}}{The mean (zero or more, length 1 or n)}

\item{\code{n_threads}}{Number of threads to use; see Details}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-exponential"></a>}}
\if{latex}{\out{\hypertarget{method-exponential}{}}}
\subsection{Method \code{exponential()}}{
Generate \code{n} numbers from a exponential distribution
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{dust_rng$exponential(n, rate, n_threads = 1L)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{n}}{Number of samples to draw (per generator)}

\item{\code{rate}}{The rate of the exponential}

\item{\code{n_threads}}{Number of threads to use; see Details}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-multinomial"></a>}}
\if{latex}{\out{\hypertarget{method-multinomial}{}}}
\subsection{Method \code{multinomial()}}{
Generate \code{n} draws from a multinomial distribution.
In contrast with most of the distributions here, each draw is a
\emph{vector} with the same length as \code{prob}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{dust_rng$multinomial(n, size, prob, n_threads = 1L)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{n}}{The number of samples to draw (per generator)}

\item{\code{size}}{The number of trials (zero or more, length 1 or n)}

\item{\code{prob}}{A vector of probabilities for the success of each
trial. This does not need to sum to 1 (though all elements
must be non-negative), in which case we interpret \code{prob} as
weights and normalise so that they equal 1 before sampling.}

\item{\code{n_threads}}{Number of threads to use; see Details}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-state"></a>}}
\if{latex}{\out{\hypertarget{method-state}{}}}
\subsection{Method \code{state()}}{
Returns the state of the random number generator. This returns a
raw vector of length 32 * n_generators. It is primarily intended for
debugging as one cannot (yet) initialise a dust_rng object with this
state.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{dust_rng$state()}\if{html}{\out{</div>}}
}

}
}
