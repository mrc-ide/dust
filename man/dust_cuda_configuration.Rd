% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cuda.R
\name{dust_cuda_configuration}
\alias{dust_cuda_configuration}
\title{Detect CUDA configuration}
\usage{
dust_cuda_configuration(
  path_cuda_lib = NULL,
  path_cub_include = NULL,
  quiet = TRUE,
  forget = FALSE
)
}
\arguments{
\item{path_cuda_lib}{Optional path to the CUDA libraries, if they
are not on system library paths. This will be added as
\verb{-L\{path_cuda_lib\}} in calls to \code{nvcc}}

\item{path_cub_include}{Optional path to the CUB headers, if using
CUDA < 11.0.0. See Details}

\item{quiet}{Logical, indicating if compilation of test programs
should be quiet}

\item{forget}{Logical, indicating if we should forget cached
values and recompute the configuration}
}
\value{
A list of configuration information. This includes:
\itemize{
\item \code{has_cuda}: logical, indicating if it is possible to compile CUDA on
this machine (not necessarily use it though)
\item \code{cuda_version}: the version of CUDA found
\item \code{devices}: a data.frame of device information:
\itemize{
\item id: the device id (integer, typically in a sequence from 0)
\item name: the human-friendly name of the device
\item memory: the memory of the device, in MB
\item version: the compute version for this device
}
\item \code{path_cuda_lib}: path to CUDA libraries, if required
\item \code{path_cub_include}: path to CUB headers, if required
}

If compilation of the test program fails, then \code{has_cuda} will be
\code{FALSE} and all other elements will be \code{NULL}.
}
\description{
Detect CUDA configuration. This is experimental and subject to
change. This function tries to compile a small program with \code{nvcc}
and confirms that this can be loaded into R, then uses that
program to query the presence and capabilities of your NVIDIA
GPUs. If this works, then you can use the GPU-enabled dust
features, and the infomation returned will help us.  It's quite
slow to execute (several seconds) so we cache the value within a
session.  Later versions of dust will cache this across sessions
too.
}
\details{
If you are using older CUDA (< 11.0.0) then you need to provide
\href{https://nvlabs.github.io/cub/}{CUB} headers, which we use to
manage state on the device (these are included in CUDA 11.0.0 and
higher). You can provide this as:
\itemize{
\item a path to this function (\code{path_cub_include})
\item the environment variable DUST_CUB_PATH_INCLUDE
\item CUB headers installed into the default location (R >= 4.0.0,
see below).
}

These are checked in turn with the first found taking
precedence. The default location is stored with
\code{tools::R_user_dir("dust", "data")}, but this functionality is
only available on R >= 4.0.0.

To install CUB you can do:\preformatted{dust:::cuda_install_cub(NULL)
}

which will install CUB into the default path (provide a path on
older versions of R and set this path as DUST_CUB_PATH_INCLUDE).
}
\examples{
dust::dust_cuda_configuration()
}
